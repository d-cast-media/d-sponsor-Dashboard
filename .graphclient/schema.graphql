schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type AcceptedOffer {
  id: Bytes!
  offeror: Bytes!
  offerId: BigInt!
  assetContract: Bytes!
  tokenId: BigInt!
  seller: Bytes!
  quantityBought: BigInt!
  totalPricePaid: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input AcceptedOffer_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  offeror: Bytes
  offeror_not: Bytes
  offeror_gt: Bytes
  offeror_lt: Bytes
  offeror_gte: Bytes
  offeror_lte: Bytes
  offeror_in: [Bytes!]
  offeror_not_in: [Bytes!]
  offeror_contains: Bytes
  offeror_not_contains: Bytes
  offerId: BigInt
  offerId_not: BigInt
  offerId_gt: BigInt
  offerId_lt: BigInt
  offerId_gte: BigInt
  offerId_lte: BigInt
  offerId_in: [BigInt!]
  offerId_not_in: [BigInt!]
  assetContract: Bytes
  assetContract_not: Bytes
  assetContract_gt: Bytes
  assetContract_lt: Bytes
  assetContract_gte: Bytes
  assetContract_lte: Bytes
  assetContract_in: [Bytes!]
  assetContract_not_in: [Bytes!]
  assetContract_contains: Bytes
  assetContract_not_contains: Bytes
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  seller: Bytes
  seller_not: Bytes
  seller_gt: Bytes
  seller_lt: Bytes
  seller_gte: Bytes
  seller_lte: Bytes
  seller_in: [Bytes!]
  seller_not_in: [Bytes!]
  seller_contains: Bytes
  seller_not_contains: Bytes
  quantityBought: BigInt
  quantityBought_not: BigInt
  quantityBought_gt: BigInt
  quantityBought_lt: BigInt
  quantityBought_gte: BigInt
  quantityBought_lte: BigInt
  quantityBought_in: [BigInt!]
  quantityBought_not_in: [BigInt!]
  totalPricePaid: BigInt
  totalPricePaid_not: BigInt
  totalPricePaid_gt: BigInt
  totalPricePaid_lt: BigInt
  totalPricePaid_gte: BigInt
  totalPricePaid_lte: BigInt
  totalPricePaid_in: [BigInt!]
  totalPricePaid_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AcceptedOffer_filter]
  or: [AcceptedOffer_filter]
}

enum AcceptedOffer_orderBy {
  id
  offeror
  offerId
  assetContract
  tokenId
  seller
  quantityBought
  totalPricePaid
  blockNumber
  blockTimestamp
  transactionHash
}

type AdOffer {
  id: String!
  disable: Boolean!
  name: String!
  metadataURL: String!
  nftContract: NftContract!
  initialCreator: Bytes!
  creationTimestamp: BigInt!
  adParameters(skip: Int = 0, first: Int = 100, orderBy: AdParameter_orderBy, orderDirection: OrderDirection, where: AdParameter_filter): [AdParameter!]!
  admins: [Bytes!]
  validators: [Bytes!]
  allProposals(skip: Int = 0, first: Int = 100, orderBy: AdProposal_orderBy, orderDirection: OrderDirection, where: AdProposal_filter): [AdProposal!]
  currentProposals(skip: Int = 0, first: Int = 100, orderBy: CurrentProposal_orderBy, orderDirection: OrderDirection, where: CurrentProposal_filter): [CurrentProposal!]
}

input AdOffer_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  disable: Boolean
  disable_not: Boolean
  disable_in: [Boolean!]
  disable_not_in: [Boolean!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  metadataURL: String
  metadataURL_not: String
  metadataURL_gt: String
  metadataURL_lt: String
  metadataURL_gte: String
  metadataURL_lte: String
  metadataURL_in: [String!]
  metadataURL_not_in: [String!]
  metadataURL_contains: String
  metadataURL_contains_nocase: String
  metadataURL_not_contains: String
  metadataURL_not_contains_nocase: String
  metadataURL_starts_with: String
  metadataURL_starts_with_nocase: String
  metadataURL_not_starts_with: String
  metadataURL_not_starts_with_nocase: String
  metadataURL_ends_with: String
  metadataURL_ends_with_nocase: String
  metadataURL_not_ends_with: String
  metadataURL_not_ends_with_nocase: String
  nftContract: String
  nftContract_not: String
  nftContract_gt: String
  nftContract_lt: String
  nftContract_gte: String
  nftContract_lte: String
  nftContract_in: [String!]
  nftContract_not_in: [String!]
  nftContract_contains: String
  nftContract_contains_nocase: String
  nftContract_not_contains: String
  nftContract_not_contains_nocase: String
  nftContract_starts_with: String
  nftContract_starts_with_nocase: String
  nftContract_not_starts_with: String
  nftContract_not_starts_with_nocase: String
  nftContract_ends_with: String
  nftContract_ends_with_nocase: String
  nftContract_not_ends_with: String
  nftContract_not_ends_with_nocase: String
  nftContract_: NftContract_filter
  initialCreator: Bytes
  initialCreator_not: Bytes
  initialCreator_gt: Bytes
  initialCreator_lt: Bytes
  initialCreator_gte: Bytes
  initialCreator_lte: Bytes
  initialCreator_in: [Bytes!]
  initialCreator_not_in: [Bytes!]
  initialCreator_contains: Bytes
  initialCreator_not_contains: Bytes
  creationTimestamp: BigInt
  creationTimestamp_not: BigInt
  creationTimestamp_gt: BigInt
  creationTimestamp_lt: BigInt
  creationTimestamp_gte: BigInt
  creationTimestamp_lte: BigInt
  creationTimestamp_in: [BigInt!]
  creationTimestamp_not_in: [BigInt!]
  adParameters: [String!]
  adParameters_not: [String!]
  adParameters_contains: [String!]
  adParameters_contains_nocase: [String!]
  adParameters_not_contains: [String!]
  adParameters_not_contains_nocase: [String!]
  adParameters_: AdParameter_filter
  admins: [Bytes!]
  admins_not: [Bytes!]
  admins_contains: [Bytes!]
  admins_contains_nocase: [Bytes!]
  admins_not_contains: [Bytes!]
  admins_not_contains_nocase: [Bytes!]
  validators: [Bytes!]
  validators_not: [Bytes!]
  validators_contains: [Bytes!]
  validators_contains_nocase: [Bytes!]
  validators_not_contains: [Bytes!]
  validators_not_contains_nocase: [Bytes!]
  allProposals_: AdProposal_filter
  currentProposals_: CurrentProposal_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AdOffer_filter]
  or: [AdOffer_filter]
}

enum AdOffer_orderBy {
  id
  disable
  name
  metadataURL
  nftContract
  nftContract__id
  nftContract__name
  nftContract__symbol
  nftContract__baseURI
  nftContract__contractURI
  nftContract__maxSupply
  nftContract__minter
  nftContract__forwarder
  nftContract__royaltyBps
  nftContract__allowList
  initialCreator
  creationTimestamp
  adParameters
  admins
  validators
  allProposals
  currentProposals
}

type AdParameter {
  id: String!
  base: String!
  variants: [String!]!
  adOffers(skip: Int = 0, first: Int = 100, orderBy: AdOffer_orderBy, orderDirection: OrderDirection, where: AdOffer_filter): [AdOffer!]
  proposals(skip: Int = 0, first: Int = 100, orderBy: AdProposal_orderBy, orderDirection: OrderDirection, where: AdProposal_filter): [AdProposal!]
  currentProposals(skip: Int = 0, first: Int = 100, orderBy: CurrentProposal_orderBy, orderDirection: OrderDirection, where: CurrentProposal_filter): [CurrentProposal!]
}

input AdParameter_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  base: String
  base_not: String
  base_gt: String
  base_lt: String
  base_gte: String
  base_lte: String
  base_in: [String!]
  base_not_in: [String!]
  base_contains: String
  base_contains_nocase: String
  base_not_contains: String
  base_not_contains_nocase: String
  base_starts_with: String
  base_starts_with_nocase: String
  base_not_starts_with: String
  base_not_starts_with_nocase: String
  base_ends_with: String
  base_ends_with_nocase: String
  base_not_ends_with: String
  base_not_ends_with_nocase: String
  variants: [String!]
  variants_not: [String!]
  variants_contains: [String!]
  variants_contains_nocase: [String!]
  variants_not_contains: [String!]
  variants_not_contains_nocase: [String!]
  adOffers_: AdOffer_filter
  proposals_: AdProposal_filter
  currentProposals_: CurrentProposal_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AdParameter_filter]
  or: [AdParameter_filter]
}

enum AdParameter_orderBy {
  id
  base
  variants
  adOffers
  proposals
  currentProposals
}

type AdProposal {
  id: String!
  adOffer: AdOffer!
  token: Token!
  adParameter: AdParameter!
  status: AdProposalStatus!
  data: String!
  rejectReason: String
  creationTimestamp: BigInt!
  lastUpdateTimestamp: BigInt!
}

enum AdProposalStatus {
  CURRENT_ACCEPTED
  CURRENT_PENDING
  CURRENT_REJECTED
  PREV_ACCEPTED
  PREV_PENDING
  PREV_REJECTED
}

input AdProposal_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  adOffer: String
  adOffer_not: String
  adOffer_gt: String
  adOffer_lt: String
  adOffer_gte: String
  adOffer_lte: String
  adOffer_in: [String!]
  adOffer_not_in: [String!]
  adOffer_contains: String
  adOffer_contains_nocase: String
  adOffer_not_contains: String
  adOffer_not_contains_nocase: String
  adOffer_starts_with: String
  adOffer_starts_with_nocase: String
  adOffer_not_starts_with: String
  adOffer_not_starts_with_nocase: String
  adOffer_ends_with: String
  adOffer_ends_with_nocase: String
  adOffer_not_ends_with: String
  adOffer_not_ends_with_nocase: String
  adOffer_: AdOffer_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  adParameter: String
  adParameter_not: String
  adParameter_gt: String
  adParameter_lt: String
  adParameter_gte: String
  adParameter_lte: String
  adParameter_in: [String!]
  adParameter_not_in: [String!]
  adParameter_contains: String
  adParameter_contains_nocase: String
  adParameter_not_contains: String
  adParameter_not_contains_nocase: String
  adParameter_starts_with: String
  adParameter_starts_with_nocase: String
  adParameter_not_starts_with: String
  adParameter_not_starts_with_nocase: String
  adParameter_ends_with: String
  adParameter_ends_with_nocase: String
  adParameter_not_ends_with: String
  adParameter_not_ends_with_nocase: String
  adParameter_: AdParameter_filter
  status: AdProposalStatus
  status_not: AdProposalStatus
  status_in: [AdProposalStatus!]
  status_not_in: [AdProposalStatus!]
  data: String
  data_not: String
  data_gt: String
  data_lt: String
  data_gte: String
  data_lte: String
  data_in: [String!]
  data_not_in: [String!]
  data_contains: String
  data_contains_nocase: String
  data_not_contains: String
  data_not_contains_nocase: String
  data_starts_with: String
  data_starts_with_nocase: String
  data_not_starts_with: String
  data_not_starts_with_nocase: String
  data_ends_with: String
  data_ends_with_nocase: String
  data_not_ends_with: String
  data_not_ends_with_nocase: String
  rejectReason: String
  rejectReason_not: String
  rejectReason_gt: String
  rejectReason_lt: String
  rejectReason_gte: String
  rejectReason_lte: String
  rejectReason_in: [String!]
  rejectReason_not_in: [String!]
  rejectReason_contains: String
  rejectReason_contains_nocase: String
  rejectReason_not_contains: String
  rejectReason_not_contains_nocase: String
  rejectReason_starts_with: String
  rejectReason_starts_with_nocase: String
  rejectReason_not_starts_with: String
  rejectReason_not_starts_with_nocase: String
  rejectReason_ends_with: String
  rejectReason_ends_with_nocase: String
  rejectReason_not_ends_with: String
  rejectReason_not_ends_with_nocase: String
  creationTimestamp: BigInt
  creationTimestamp_not: BigInt
  creationTimestamp_gt: BigInt
  creationTimestamp_lt: BigInt
  creationTimestamp_gte: BigInt
  creationTimestamp_lte: BigInt
  creationTimestamp_in: [BigInt!]
  creationTimestamp_not_in: [BigInt!]
  lastUpdateTimestamp: BigInt
  lastUpdateTimestamp_not: BigInt
  lastUpdateTimestamp_gt: BigInt
  lastUpdateTimestamp_lt: BigInt
  lastUpdateTimestamp_gte: BigInt
  lastUpdateTimestamp_lte: BigInt
  lastUpdateTimestamp_in: [BigInt!]
  lastUpdateTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AdProposal_filter]
  or: [AdProposal_filter]
}

enum AdProposal_orderBy {
  id
  adOffer
  adOffer__id
  adOffer__disable
  adOffer__name
  adOffer__metadataURL
  adOffer__initialCreator
  adOffer__creationTimestamp
  token
  token__id
  token__tokenId
  token__setInAllowList
  adParameter
  adParameter__id
  adParameter__base
  status
  data
  rejectReason
  creationTimestamp
  lastUpdateTimestamp
}

enum Aggregation_interval {
  hour
  day
}

type AuctionClosed {
  id: Bytes!
  listingId: BigInt!
  closer: Bytes!
  cancelled: Boolean!
  auctionCreator: Bytes!
  winningBidder: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input AuctionClosed_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  listingId: BigInt
  listingId_not: BigInt
  listingId_gt: BigInt
  listingId_lt: BigInt
  listingId_gte: BigInt
  listingId_lte: BigInt
  listingId_in: [BigInt!]
  listingId_not_in: [BigInt!]
  closer: Bytes
  closer_not: Bytes
  closer_gt: Bytes
  closer_lt: Bytes
  closer_gte: Bytes
  closer_lte: Bytes
  closer_in: [Bytes!]
  closer_not_in: [Bytes!]
  closer_contains: Bytes
  closer_not_contains: Bytes
  cancelled: Boolean
  cancelled_not: Boolean
  cancelled_in: [Boolean!]
  cancelled_not_in: [Boolean!]
  auctionCreator: Bytes
  auctionCreator_not: Bytes
  auctionCreator_gt: Bytes
  auctionCreator_lt: Bytes
  auctionCreator_gte: Bytes
  auctionCreator_lte: Bytes
  auctionCreator_in: [Bytes!]
  auctionCreator_not_in: [Bytes!]
  auctionCreator_contains: Bytes
  auctionCreator_not_contains: Bytes
  winningBidder: Bytes
  winningBidder_not: Bytes
  winningBidder_gt: Bytes
  winningBidder_lt: Bytes
  winningBidder_gte: Bytes
  winningBidder_lte: Bytes
  winningBidder_in: [Bytes!]
  winningBidder_not_in: [Bytes!]
  winningBidder_contains: Bytes
  winningBidder_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AuctionClosed_filter]
  or: [AuctionClosed_filter]
}

enum AuctionClosed_orderBy {
  id
  listingId
  closer
  cancelled
  auctionCreator
  winningBidder
  blockNumber
  blockTimestamp
  transactionHash
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type CallWithProtocolFee {
  id: Bytes!
  target: Bytes!
  currency: Bytes!
  fee: BigInt!
  enabler: Bytes!
  spender: Bytes!
  referralAdditionalInformation: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  revenueTransaction: RevenueTransaction
  referralAddresses: [Bytes!]!
  referralUnitShare: Int
  referralNb: Int
}

input CallWithProtocolFee_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  target: Bytes
  target_not: Bytes
  target_gt: Bytes
  target_lt: Bytes
  target_gte: Bytes
  target_lte: Bytes
  target_in: [Bytes!]
  target_not_in: [Bytes!]
  target_contains: Bytes
  target_not_contains: Bytes
  currency: Bytes
  currency_not: Bytes
  currency_gt: Bytes
  currency_lt: Bytes
  currency_gte: Bytes
  currency_lte: Bytes
  currency_in: [Bytes!]
  currency_not_in: [Bytes!]
  currency_contains: Bytes
  currency_not_contains: Bytes
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  enabler: Bytes
  enabler_not: Bytes
  enabler_gt: Bytes
  enabler_lt: Bytes
  enabler_gte: Bytes
  enabler_lte: Bytes
  enabler_in: [Bytes!]
  enabler_not_in: [Bytes!]
  enabler_contains: Bytes
  enabler_not_contains: Bytes
  spender: Bytes
  spender_not: Bytes
  spender_gt: Bytes
  spender_lt: Bytes
  spender_gte: Bytes
  spender_lte: Bytes
  spender_in: [Bytes!]
  spender_not_in: [Bytes!]
  spender_contains: Bytes
  spender_not_contains: Bytes
  referralAdditionalInformation: String
  referralAdditionalInformation_not: String
  referralAdditionalInformation_gt: String
  referralAdditionalInformation_lt: String
  referralAdditionalInformation_gte: String
  referralAdditionalInformation_lte: String
  referralAdditionalInformation_in: [String!]
  referralAdditionalInformation_not_in: [String!]
  referralAdditionalInformation_contains: String
  referralAdditionalInformation_contains_nocase: String
  referralAdditionalInformation_not_contains: String
  referralAdditionalInformation_not_contains_nocase: String
  referralAdditionalInformation_starts_with: String
  referralAdditionalInformation_starts_with_nocase: String
  referralAdditionalInformation_not_starts_with: String
  referralAdditionalInformation_not_starts_with_nocase: String
  referralAdditionalInformation_ends_with: String
  referralAdditionalInformation_ends_with_nocase: String
  referralAdditionalInformation_not_ends_with: String
  referralAdditionalInformation_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  revenueTransaction: String
  revenueTransaction_not: String
  revenueTransaction_gt: String
  revenueTransaction_lt: String
  revenueTransaction_gte: String
  revenueTransaction_lte: String
  revenueTransaction_in: [String!]
  revenueTransaction_not_in: [String!]
  revenueTransaction_contains: String
  revenueTransaction_contains_nocase: String
  revenueTransaction_not_contains: String
  revenueTransaction_not_contains_nocase: String
  revenueTransaction_starts_with: String
  revenueTransaction_starts_with_nocase: String
  revenueTransaction_not_starts_with: String
  revenueTransaction_not_starts_with_nocase: String
  revenueTransaction_ends_with: String
  revenueTransaction_ends_with_nocase: String
  revenueTransaction_not_ends_with: String
  revenueTransaction_not_ends_with_nocase: String
  revenueTransaction_: RevenueTransaction_filter
  referralAddresses: [Bytes!]
  referralAddresses_not: [Bytes!]
  referralAddresses_contains: [Bytes!]
  referralAddresses_contains_nocase: [Bytes!]
  referralAddresses_not_contains: [Bytes!]
  referralAddresses_not_contains_nocase: [Bytes!]
  referralUnitShare: Int
  referralUnitShare_not: Int
  referralUnitShare_gt: Int
  referralUnitShare_lt: Int
  referralUnitShare_gte: Int
  referralUnitShare_lte: Int
  referralUnitShare_in: [Int!]
  referralUnitShare_not_in: [Int!]
  referralNb: Int
  referralNb_not: Int
  referralNb_gt: Int
  referralNb_lt: Int
  referralNb_gte: Int
  referralNb_lte: Int
  referralNb_in: [Int!]
  referralNb_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CallWithProtocolFee_filter]
  or: [CallWithProtocolFee_filter]
}

enum CallWithProtocolFee_orderBy {
  id
  target
  currency
  fee
  enabler
  spender
  referralAdditionalInformation
  blockNumber
  blockTimestamp
  transactionHash
  revenueTransaction
  revenueTransaction__id
  revenueTransaction__blockTimestamp
  referralAddresses
  referralUnitShare
  referralNb
}

type CancelledOffer {
  id: Bytes!
  offeror: Bytes!
  offerId: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input CancelledOffer_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  offeror: Bytes
  offeror_not: Bytes
  offeror_gt: Bytes
  offeror_lt: Bytes
  offeror_gte: Bytes
  offeror_lte: Bytes
  offeror_in: [Bytes!]
  offeror_not_in: [Bytes!]
  offeror_contains: Bytes
  offeror_not_contains: Bytes
  offerId: BigInt
  offerId_not: BigInt
  offerId_gt: BigInt
  offerId_lt: BigInt
  offerId_gte: BigInt
  offerId_lte: BigInt
  offerId_in: [BigInt!]
  offerId_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CancelledOffer_filter]
  or: [CancelledOffer_filter]
}

enum CancelledOffer_orderBy {
  id
  offeror
  offerId
  blockNumber
  blockTimestamp
  transactionHash
}

"""
type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

"""
type ContractURIUpdated {
  id: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input ContractURIUpdated_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ContractURIUpdated_filter]
  or: [ContractURIUpdated_filter]
}

enum ContractURIUpdated_orderBy {
  id
  blockNumber
  blockTimestamp
  transactionHash
}

type CurrentProposal {
  id: String!
  adOffer: AdOffer!
  token: Token!
  adParameter: AdParameter!
  pendingProposal: AdProposal
  acceptedProposal: AdProposal
  rejectedProposal: AdProposal
}

input CurrentProposal_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  adOffer: String
  adOffer_not: String
  adOffer_gt: String
  adOffer_lt: String
  adOffer_gte: String
  adOffer_lte: String
  adOffer_in: [String!]
  adOffer_not_in: [String!]
  adOffer_contains: String
  adOffer_contains_nocase: String
  adOffer_not_contains: String
  adOffer_not_contains_nocase: String
  adOffer_starts_with: String
  adOffer_starts_with_nocase: String
  adOffer_not_starts_with: String
  adOffer_not_starts_with_nocase: String
  adOffer_ends_with: String
  adOffer_ends_with_nocase: String
  adOffer_not_ends_with: String
  adOffer_not_ends_with_nocase: String
  adOffer_: AdOffer_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  adParameter: String
  adParameter_not: String
  adParameter_gt: String
  adParameter_lt: String
  adParameter_gte: String
  adParameter_lte: String
  adParameter_in: [String!]
  adParameter_not_in: [String!]
  adParameter_contains: String
  adParameter_contains_nocase: String
  adParameter_not_contains: String
  adParameter_not_contains_nocase: String
  adParameter_starts_with: String
  adParameter_starts_with_nocase: String
  adParameter_not_starts_with: String
  adParameter_not_starts_with_nocase: String
  adParameter_ends_with: String
  adParameter_ends_with_nocase: String
  adParameter_not_ends_with: String
  adParameter_not_ends_with_nocase: String
  adParameter_: AdParameter_filter
  pendingProposal: String
  pendingProposal_not: String
  pendingProposal_gt: String
  pendingProposal_lt: String
  pendingProposal_gte: String
  pendingProposal_lte: String
  pendingProposal_in: [String!]
  pendingProposal_not_in: [String!]
  pendingProposal_contains: String
  pendingProposal_contains_nocase: String
  pendingProposal_not_contains: String
  pendingProposal_not_contains_nocase: String
  pendingProposal_starts_with: String
  pendingProposal_starts_with_nocase: String
  pendingProposal_not_starts_with: String
  pendingProposal_not_starts_with_nocase: String
  pendingProposal_ends_with: String
  pendingProposal_ends_with_nocase: String
  pendingProposal_not_ends_with: String
  pendingProposal_not_ends_with_nocase: String
  pendingProposal_: AdProposal_filter
  acceptedProposal: String
  acceptedProposal_not: String
  acceptedProposal_gt: String
  acceptedProposal_lt: String
  acceptedProposal_gte: String
  acceptedProposal_lte: String
  acceptedProposal_in: [String!]
  acceptedProposal_not_in: [String!]
  acceptedProposal_contains: String
  acceptedProposal_contains_nocase: String
  acceptedProposal_not_contains: String
  acceptedProposal_not_contains_nocase: String
  acceptedProposal_starts_with: String
  acceptedProposal_starts_with_nocase: String
  acceptedProposal_not_starts_with: String
  acceptedProposal_not_starts_with_nocase: String
  acceptedProposal_ends_with: String
  acceptedProposal_ends_with_nocase: String
  acceptedProposal_not_ends_with: String
  acceptedProposal_not_ends_with_nocase: String
  acceptedProposal_: AdProposal_filter
  rejectedProposal: String
  rejectedProposal_not: String
  rejectedProposal_gt: String
  rejectedProposal_lt: String
  rejectedProposal_gte: String
  rejectedProposal_lte: String
  rejectedProposal_in: [String!]
  rejectedProposal_not_in: [String!]
  rejectedProposal_contains: String
  rejectedProposal_contains_nocase: String
  rejectedProposal_not_contains: String
  rejectedProposal_not_contains_nocase: String
  rejectedProposal_starts_with: String
  rejectedProposal_starts_with_nocase: String
  rejectedProposal_not_starts_with: String
  rejectedProposal_not_starts_with_nocase: String
  rejectedProposal_ends_with: String
  rejectedProposal_ends_with_nocase: String
  rejectedProposal_not_ends_with: String
  rejectedProposal_not_ends_with_nocase: String
  rejectedProposal_: AdProposal_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CurrentProposal_filter]
  or: [CurrentProposal_filter]
}

enum CurrentProposal_orderBy {
  id
  adOffer
  adOffer__id
  adOffer__disable
  adOffer__name
  adOffer__metadataURL
  adOffer__initialCreator
  adOffer__creationTimestamp
  token
  token__id
  token__tokenId
  token__setInAllowList
  adParameter
  adParameter__id
  adParameter__base
  pendingProposal
  pendingProposal__id
  pendingProposal__status
  pendingProposal__data
  pendingProposal__rejectReason
  pendingProposal__creationTimestamp
  pendingProposal__lastUpdateTimestamp
  acceptedProposal
  acceptedProposal__id
  acceptedProposal__status
  acceptedProposal__data
  acceptedProposal__rejectReason
  acceptedProposal__creationTimestamp
  acceptedProposal__lastUpdateTimestamp
  rejectedProposal
  rejectedProposal__id
  rejectedProposal__status
  rejectedProposal__data
  rejectedProposal__rejectReason
  rejectedProposal__creationTimestamp
  rejectedProposal__lastUpdateTimestamp
}

type FeeUpdate {
  id: Bytes!
  feeRecipient: Bytes!
  feeBps: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input FeeUpdate_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  feeRecipient: Bytes
  feeRecipient_not: Bytes
  feeRecipient_gt: Bytes
  feeRecipient_lt: Bytes
  feeRecipient_gte: Bytes
  feeRecipient_lte: Bytes
  feeRecipient_in: [Bytes!]
  feeRecipient_not_in: [Bytes!]
  feeRecipient_contains: Bytes
  feeRecipient_not_contains: Bytes
  feeBps: BigInt
  feeBps_not: BigInt
  feeBps_gt: BigInt
  feeBps_lt: BigInt
  feeBps_gte: BigInt
  feeBps_lte: BigInt
  feeBps_in: [BigInt!]
  feeBps_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FeeUpdate_filter]
  or: [FeeUpdate_filter]
}

enum FeeUpdate_orderBy {
  id
  feeRecipient
  feeBps
  blockNumber
  blockTimestamp
  transactionHash
}

"""
8 bytes signed integer

"""
scalar Int8

type ListingAdded {
  id: Bytes!
  listingId: BigInt!
  assetContract: Bytes!
  lister: Bytes!
  listing_listingId: BigInt!
  listing_tokenOwner: Bytes!
  listing_assetContract: Bytes!
  listing_tokenId: BigInt!
  listing_startTime: BigInt!
  listing_endTime: BigInt!
  listing_quantity: BigInt!
  listing_currency: Bytes!
  listing_reservePricePerToken: BigInt!
  listing_buyoutPricePerToken: BigInt!
  listing_tokenType: Int!
  listing_transferType: Int!
  listing_rentalExpirationTimestamp: BigInt!
  listing_listingType: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input ListingAdded_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  listingId: BigInt
  listingId_not: BigInt
  listingId_gt: BigInt
  listingId_lt: BigInt
  listingId_gte: BigInt
  listingId_lte: BigInt
  listingId_in: [BigInt!]
  listingId_not_in: [BigInt!]
  assetContract: Bytes
  assetContract_not: Bytes
  assetContract_gt: Bytes
  assetContract_lt: Bytes
  assetContract_gte: Bytes
  assetContract_lte: Bytes
  assetContract_in: [Bytes!]
  assetContract_not_in: [Bytes!]
  assetContract_contains: Bytes
  assetContract_not_contains: Bytes
  lister: Bytes
  lister_not: Bytes
  lister_gt: Bytes
  lister_lt: Bytes
  lister_gte: Bytes
  lister_lte: Bytes
  lister_in: [Bytes!]
  lister_not_in: [Bytes!]
  lister_contains: Bytes
  lister_not_contains: Bytes
  listing_listingId: BigInt
  listing_listingId_not: BigInt
  listing_listingId_gt: BigInt
  listing_listingId_lt: BigInt
  listing_listingId_gte: BigInt
  listing_listingId_lte: BigInt
  listing_listingId_in: [BigInt!]
  listing_listingId_not_in: [BigInt!]
  listing_tokenOwner: Bytes
  listing_tokenOwner_not: Bytes
  listing_tokenOwner_gt: Bytes
  listing_tokenOwner_lt: Bytes
  listing_tokenOwner_gte: Bytes
  listing_tokenOwner_lte: Bytes
  listing_tokenOwner_in: [Bytes!]
  listing_tokenOwner_not_in: [Bytes!]
  listing_tokenOwner_contains: Bytes
  listing_tokenOwner_not_contains: Bytes
  listing_assetContract: Bytes
  listing_assetContract_not: Bytes
  listing_assetContract_gt: Bytes
  listing_assetContract_lt: Bytes
  listing_assetContract_gte: Bytes
  listing_assetContract_lte: Bytes
  listing_assetContract_in: [Bytes!]
  listing_assetContract_not_in: [Bytes!]
  listing_assetContract_contains: Bytes
  listing_assetContract_not_contains: Bytes
  listing_tokenId: BigInt
  listing_tokenId_not: BigInt
  listing_tokenId_gt: BigInt
  listing_tokenId_lt: BigInt
  listing_tokenId_gte: BigInt
  listing_tokenId_lte: BigInt
  listing_tokenId_in: [BigInt!]
  listing_tokenId_not_in: [BigInt!]
  listing_startTime: BigInt
  listing_startTime_not: BigInt
  listing_startTime_gt: BigInt
  listing_startTime_lt: BigInt
  listing_startTime_gte: BigInt
  listing_startTime_lte: BigInt
  listing_startTime_in: [BigInt!]
  listing_startTime_not_in: [BigInt!]
  listing_endTime: BigInt
  listing_endTime_not: BigInt
  listing_endTime_gt: BigInt
  listing_endTime_lt: BigInt
  listing_endTime_gte: BigInt
  listing_endTime_lte: BigInt
  listing_endTime_in: [BigInt!]
  listing_endTime_not_in: [BigInt!]
  listing_quantity: BigInt
  listing_quantity_not: BigInt
  listing_quantity_gt: BigInt
  listing_quantity_lt: BigInt
  listing_quantity_gte: BigInt
  listing_quantity_lte: BigInt
  listing_quantity_in: [BigInt!]
  listing_quantity_not_in: [BigInt!]
  listing_currency: Bytes
  listing_currency_not: Bytes
  listing_currency_gt: Bytes
  listing_currency_lt: Bytes
  listing_currency_gte: Bytes
  listing_currency_lte: Bytes
  listing_currency_in: [Bytes!]
  listing_currency_not_in: [Bytes!]
  listing_currency_contains: Bytes
  listing_currency_not_contains: Bytes
  listing_reservePricePerToken: BigInt
  listing_reservePricePerToken_not: BigInt
  listing_reservePricePerToken_gt: BigInt
  listing_reservePricePerToken_lt: BigInt
  listing_reservePricePerToken_gte: BigInt
  listing_reservePricePerToken_lte: BigInt
  listing_reservePricePerToken_in: [BigInt!]
  listing_reservePricePerToken_not_in: [BigInt!]
  listing_buyoutPricePerToken: BigInt
  listing_buyoutPricePerToken_not: BigInt
  listing_buyoutPricePerToken_gt: BigInt
  listing_buyoutPricePerToken_lt: BigInt
  listing_buyoutPricePerToken_gte: BigInt
  listing_buyoutPricePerToken_lte: BigInt
  listing_buyoutPricePerToken_in: [BigInt!]
  listing_buyoutPricePerToken_not_in: [BigInt!]
  listing_tokenType: Int
  listing_tokenType_not: Int
  listing_tokenType_gt: Int
  listing_tokenType_lt: Int
  listing_tokenType_gte: Int
  listing_tokenType_lte: Int
  listing_tokenType_in: [Int!]
  listing_tokenType_not_in: [Int!]
  listing_transferType: Int
  listing_transferType_not: Int
  listing_transferType_gt: Int
  listing_transferType_lt: Int
  listing_transferType_gte: Int
  listing_transferType_lte: Int
  listing_transferType_in: [Int!]
  listing_transferType_not_in: [Int!]
  listing_rentalExpirationTimestamp: BigInt
  listing_rentalExpirationTimestamp_not: BigInt
  listing_rentalExpirationTimestamp_gt: BigInt
  listing_rentalExpirationTimestamp_lt: BigInt
  listing_rentalExpirationTimestamp_gte: BigInt
  listing_rentalExpirationTimestamp_lte: BigInt
  listing_rentalExpirationTimestamp_in: [BigInt!]
  listing_rentalExpirationTimestamp_not_in: [BigInt!]
  listing_listingType: Int
  listing_listingType_not: Int
  listing_listingType_gt: Int
  listing_listingType_lt: Int
  listing_listingType_gte: Int
  listing_listingType_lte: Int
  listing_listingType_in: [Int!]
  listing_listingType_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ListingAdded_filter]
  or: [ListingAdded_filter]
}

enum ListingAdded_orderBy {
  id
  listingId
  assetContract
  lister
  listing_listingId
  listing_tokenOwner
  listing_assetContract
  listing_tokenId
  listing_startTime
  listing_endTime
  listing_quantity
  listing_currency
  listing_reservePricePerToken
  listing_buyoutPricePerToken
  listing_tokenType
  listing_transferType
  listing_rentalExpirationTimestamp
  listing_listingType
  blockNumber
  blockTimestamp
  transactionHash
}

type ListingRemoved {
  id: Bytes!
  listingId: BigInt!
  listingCreator: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input ListingRemoved_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  listingId: BigInt
  listingId_not: BigInt
  listingId_gt: BigInt
  listingId_lt: BigInt
  listingId_gte: BigInt
  listingId_lte: BigInt
  listingId_in: [BigInt!]
  listingId_not_in: [BigInt!]
  listingCreator: Bytes
  listingCreator_not: Bytes
  listingCreator_gt: Bytes
  listingCreator_lt: Bytes
  listingCreator_gte: Bytes
  listingCreator_lte: Bytes
  listingCreator_in: [Bytes!]
  listingCreator_not_in: [Bytes!]
  listingCreator_contains: Bytes
  listingCreator_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ListingRemoved_filter]
  or: [ListingRemoved_filter]
}

enum ListingRemoved_orderBy {
  id
  listingId
  listingCreator
  blockNumber
  blockTimestamp
  transactionHash
}

enum ListingType {
  Direct
  Auction
}

type ListingUpdated {
  id: Bytes!
  listingId: BigInt!
  listingCreator: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input ListingUpdated_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  listingId: BigInt
  listingId_not: BigInt
  listingId_gt: BigInt
  listingId_lt: BigInt
  listingId_gte: BigInt
  listingId_lte: BigInt
  listingId_in: [BigInt!]
  listingId_not_in: [BigInt!]
  listingCreator: Bytes
  listingCreator_not: Bytes
  listingCreator_gt: Bytes
  listingCreator_lt: Bytes
  listingCreator_gte: Bytes
  listingCreator_lte: Bytes
  listingCreator_in: [Bytes!]
  listingCreator_not_in: [Bytes!]
  listingCreator_contains: Bytes
  listingCreator_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ListingUpdated_filter]
  or: [ListingUpdated_filter]
}

enum ListingUpdated_orderBy {
  id
  listingId
  listingCreator
  blockNumber
  blockTimestamp
  transactionHash
}

type MarketplaceBid {
  id: Bytes!
  listing: MarketplaceListing!
  bidder: Bytes!
  quantity: BigInt!
  totalBidAmount: BigInt!
  currency: Bytes!
  status: Status!
  creationTxHash: Bytes!
  revenueTransaction: RevenueTransaction
  creationTimestamp: BigInt!
  lastUpdateTimestamp: BigInt!
}

input MarketplaceBid_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  listing: String
  listing_not: String
  listing_gt: String
  listing_lt: String
  listing_gte: String
  listing_lte: String
  listing_in: [String!]
  listing_not_in: [String!]
  listing_contains: String
  listing_contains_nocase: String
  listing_not_contains: String
  listing_not_contains_nocase: String
  listing_starts_with: String
  listing_starts_with_nocase: String
  listing_not_starts_with: String
  listing_not_starts_with_nocase: String
  listing_ends_with: String
  listing_ends_with_nocase: String
  listing_not_ends_with: String
  listing_not_ends_with_nocase: String
  listing_: MarketplaceListing_filter
  bidder: Bytes
  bidder_not: Bytes
  bidder_gt: Bytes
  bidder_lt: Bytes
  bidder_gte: Bytes
  bidder_lte: Bytes
  bidder_in: [Bytes!]
  bidder_not_in: [Bytes!]
  bidder_contains: Bytes
  bidder_not_contains: Bytes
  quantity: BigInt
  quantity_not: BigInt
  quantity_gt: BigInt
  quantity_lt: BigInt
  quantity_gte: BigInt
  quantity_lte: BigInt
  quantity_in: [BigInt!]
  quantity_not_in: [BigInt!]
  totalBidAmount: BigInt
  totalBidAmount_not: BigInt
  totalBidAmount_gt: BigInt
  totalBidAmount_lt: BigInt
  totalBidAmount_gte: BigInt
  totalBidAmount_lte: BigInt
  totalBidAmount_in: [BigInt!]
  totalBidAmount_not_in: [BigInt!]
  currency: Bytes
  currency_not: Bytes
  currency_gt: Bytes
  currency_lt: Bytes
  currency_gte: Bytes
  currency_lte: Bytes
  currency_in: [Bytes!]
  currency_not_in: [Bytes!]
  currency_contains: Bytes
  currency_not_contains: Bytes
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  creationTxHash: Bytes
  creationTxHash_not: Bytes
  creationTxHash_gt: Bytes
  creationTxHash_lt: Bytes
  creationTxHash_gte: Bytes
  creationTxHash_lte: Bytes
  creationTxHash_in: [Bytes!]
  creationTxHash_not_in: [Bytes!]
  creationTxHash_contains: Bytes
  creationTxHash_not_contains: Bytes
  revenueTransaction: String
  revenueTransaction_not: String
  revenueTransaction_gt: String
  revenueTransaction_lt: String
  revenueTransaction_gte: String
  revenueTransaction_lte: String
  revenueTransaction_in: [String!]
  revenueTransaction_not_in: [String!]
  revenueTransaction_contains: String
  revenueTransaction_contains_nocase: String
  revenueTransaction_not_contains: String
  revenueTransaction_not_contains_nocase: String
  revenueTransaction_starts_with: String
  revenueTransaction_starts_with_nocase: String
  revenueTransaction_not_starts_with: String
  revenueTransaction_not_starts_with_nocase: String
  revenueTransaction_ends_with: String
  revenueTransaction_ends_with_nocase: String
  revenueTransaction_not_ends_with: String
  revenueTransaction_not_ends_with_nocase: String
  revenueTransaction_: RevenueTransaction_filter
  creationTimestamp: BigInt
  creationTimestamp_not: BigInt
  creationTimestamp_gt: BigInt
  creationTimestamp_lt: BigInt
  creationTimestamp_gte: BigInt
  creationTimestamp_lte: BigInt
  creationTimestamp_in: [BigInt!]
  creationTimestamp_not_in: [BigInt!]
  lastUpdateTimestamp: BigInt
  lastUpdateTimestamp_not: BigInt
  lastUpdateTimestamp_gt: BigInt
  lastUpdateTimestamp_lt: BigInt
  lastUpdateTimestamp_gte: BigInt
  lastUpdateTimestamp_lte: BigInt
  lastUpdateTimestamp_in: [BigInt!]
  lastUpdateTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MarketplaceBid_filter]
  or: [MarketplaceBid_filter]
}

enum MarketplaceBid_orderBy {
  id
  listing
  listing__id
  listing__listingType
  listing__lister
  listing__startTime
  listing__endTime
  listing__quantity
  listing__currency
  listing__reservePricePerToken
  listing__buyoutPricePerToken
  listing__tokenType
  listing__transferType
  listing__rentalExpirationTimestamp
  listing__status
  listing__creationTimestamp
  listing__lastUpdateTimestamp
  bidder
  quantity
  totalBidAmount
  currency
  status
  creationTxHash
  revenueTransaction
  revenueTransaction__id
  revenueTransaction__blockTimestamp
  creationTimestamp
  lastUpdateTimestamp
}

type MarketplaceDirectBuy {
  id: Bytes!
  listing: MarketplaceListing!
  buyer: Bytes!
  quantityBought: BigInt!
  totalPricePaid: BigInt!
  revenueTransaction: RevenueTransaction!
}

input MarketplaceDirectBuy_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  listing: String
  listing_not: String
  listing_gt: String
  listing_lt: String
  listing_gte: String
  listing_lte: String
  listing_in: [String!]
  listing_not_in: [String!]
  listing_contains: String
  listing_contains_nocase: String
  listing_not_contains: String
  listing_not_contains_nocase: String
  listing_starts_with: String
  listing_starts_with_nocase: String
  listing_not_starts_with: String
  listing_not_starts_with_nocase: String
  listing_ends_with: String
  listing_ends_with_nocase: String
  listing_not_ends_with: String
  listing_not_ends_with_nocase: String
  listing_: MarketplaceListing_filter
  buyer: Bytes
  buyer_not: Bytes
  buyer_gt: Bytes
  buyer_lt: Bytes
  buyer_gte: Bytes
  buyer_lte: Bytes
  buyer_in: [Bytes!]
  buyer_not_in: [Bytes!]
  buyer_contains: Bytes
  buyer_not_contains: Bytes
  quantityBought: BigInt
  quantityBought_not: BigInt
  quantityBought_gt: BigInt
  quantityBought_lt: BigInt
  quantityBought_gte: BigInt
  quantityBought_lte: BigInt
  quantityBought_in: [BigInt!]
  quantityBought_not_in: [BigInt!]
  totalPricePaid: BigInt
  totalPricePaid_not: BigInt
  totalPricePaid_gt: BigInt
  totalPricePaid_lt: BigInt
  totalPricePaid_gte: BigInt
  totalPricePaid_lte: BigInt
  totalPricePaid_in: [BigInt!]
  totalPricePaid_not_in: [BigInt!]
  revenueTransaction: String
  revenueTransaction_not: String
  revenueTransaction_gt: String
  revenueTransaction_lt: String
  revenueTransaction_gte: String
  revenueTransaction_lte: String
  revenueTransaction_in: [String!]
  revenueTransaction_not_in: [String!]
  revenueTransaction_contains: String
  revenueTransaction_contains_nocase: String
  revenueTransaction_not_contains: String
  revenueTransaction_not_contains_nocase: String
  revenueTransaction_starts_with: String
  revenueTransaction_starts_with_nocase: String
  revenueTransaction_not_starts_with: String
  revenueTransaction_not_starts_with_nocase: String
  revenueTransaction_ends_with: String
  revenueTransaction_ends_with_nocase: String
  revenueTransaction_not_ends_with: String
  revenueTransaction_not_ends_with_nocase: String
  revenueTransaction_: RevenueTransaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MarketplaceDirectBuy_filter]
  or: [MarketplaceDirectBuy_filter]
}

enum MarketplaceDirectBuy_orderBy {
  id
  listing
  listing__id
  listing__listingType
  listing__lister
  listing__startTime
  listing__endTime
  listing__quantity
  listing__currency
  listing__reservePricePerToken
  listing__buyoutPricePerToken
  listing__tokenType
  listing__transferType
  listing__rentalExpirationTimestamp
  listing__status
  listing__creationTimestamp
  listing__lastUpdateTimestamp
  buyer
  quantityBought
  totalPricePaid
  revenueTransaction
  revenueTransaction__id
  revenueTransaction__blockTimestamp
}

type MarketplaceListing {
  id: String!
  listingType: ListingType!
  lister: Bytes!
  token: Token!
  startTime: BigInt!
  endTime: BigInt!
  quantity: BigInt!
  currency: Bytes!
  reservePricePerToken: BigInt!
  buyoutPricePerToken: BigInt!
  tokenType: TokenType!
  transferType: TransferType!
  rentalExpirationTimestamp: BigInt!
  status: Status!
  creationTimestamp: BigInt!
  lastUpdateTimestamp: BigInt!
  completedBid: MarketplaceBid
  bids(skip: Int = 0, first: Int = 100, orderBy: MarketplaceBid_orderBy, orderDirection: OrderDirection, where: MarketplaceBid_filter): [MarketplaceBid!]
  directBuys(skip: Int = 0, first: Int = 100, orderBy: MarketplaceDirectBuy_orderBy, orderDirection: OrderDirection, where: MarketplaceDirectBuy_filter): [MarketplaceDirectBuy!]
}

input MarketplaceListing_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  listingType: ListingType
  listingType_not: ListingType
  listingType_in: [ListingType!]
  listingType_not_in: [ListingType!]
  lister: Bytes
  lister_not: Bytes
  lister_gt: Bytes
  lister_lt: Bytes
  lister_gte: Bytes
  lister_lte: Bytes
  lister_in: [Bytes!]
  lister_not_in: [Bytes!]
  lister_contains: Bytes
  lister_not_contains: Bytes
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  startTime: BigInt
  startTime_not: BigInt
  startTime_gt: BigInt
  startTime_lt: BigInt
  startTime_gte: BigInt
  startTime_lte: BigInt
  startTime_in: [BigInt!]
  startTime_not_in: [BigInt!]
  endTime: BigInt
  endTime_not: BigInt
  endTime_gt: BigInt
  endTime_lt: BigInt
  endTime_gte: BigInt
  endTime_lte: BigInt
  endTime_in: [BigInt!]
  endTime_not_in: [BigInt!]
  quantity: BigInt
  quantity_not: BigInt
  quantity_gt: BigInt
  quantity_lt: BigInt
  quantity_gte: BigInt
  quantity_lte: BigInt
  quantity_in: [BigInt!]
  quantity_not_in: [BigInt!]
  currency: Bytes
  currency_not: Bytes
  currency_gt: Bytes
  currency_lt: Bytes
  currency_gte: Bytes
  currency_lte: Bytes
  currency_in: [Bytes!]
  currency_not_in: [Bytes!]
  currency_contains: Bytes
  currency_not_contains: Bytes
  reservePricePerToken: BigInt
  reservePricePerToken_not: BigInt
  reservePricePerToken_gt: BigInt
  reservePricePerToken_lt: BigInt
  reservePricePerToken_gte: BigInt
  reservePricePerToken_lte: BigInt
  reservePricePerToken_in: [BigInt!]
  reservePricePerToken_not_in: [BigInt!]
  buyoutPricePerToken: BigInt
  buyoutPricePerToken_not: BigInt
  buyoutPricePerToken_gt: BigInt
  buyoutPricePerToken_lt: BigInt
  buyoutPricePerToken_gte: BigInt
  buyoutPricePerToken_lte: BigInt
  buyoutPricePerToken_in: [BigInt!]
  buyoutPricePerToken_not_in: [BigInt!]
  tokenType: TokenType
  tokenType_not: TokenType
  tokenType_in: [TokenType!]
  tokenType_not_in: [TokenType!]
  transferType: TransferType
  transferType_not: TransferType
  transferType_in: [TransferType!]
  transferType_not_in: [TransferType!]
  rentalExpirationTimestamp: BigInt
  rentalExpirationTimestamp_not: BigInt
  rentalExpirationTimestamp_gt: BigInt
  rentalExpirationTimestamp_lt: BigInt
  rentalExpirationTimestamp_gte: BigInt
  rentalExpirationTimestamp_lte: BigInt
  rentalExpirationTimestamp_in: [BigInt!]
  rentalExpirationTimestamp_not_in: [BigInt!]
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  creationTimestamp: BigInt
  creationTimestamp_not: BigInt
  creationTimestamp_gt: BigInt
  creationTimestamp_lt: BigInt
  creationTimestamp_gte: BigInt
  creationTimestamp_lte: BigInt
  creationTimestamp_in: [BigInt!]
  creationTimestamp_not_in: [BigInt!]
  lastUpdateTimestamp: BigInt
  lastUpdateTimestamp_not: BigInt
  lastUpdateTimestamp_gt: BigInt
  lastUpdateTimestamp_lt: BigInt
  lastUpdateTimestamp_gte: BigInt
  lastUpdateTimestamp_lte: BigInt
  lastUpdateTimestamp_in: [BigInt!]
  lastUpdateTimestamp_not_in: [BigInt!]
  completedBid: String
  completedBid_not: String
  completedBid_gt: String
  completedBid_lt: String
  completedBid_gte: String
  completedBid_lte: String
  completedBid_in: [String!]
  completedBid_not_in: [String!]
  completedBid_contains: String
  completedBid_contains_nocase: String
  completedBid_not_contains: String
  completedBid_not_contains_nocase: String
  completedBid_starts_with: String
  completedBid_starts_with_nocase: String
  completedBid_not_starts_with: String
  completedBid_not_starts_with_nocase: String
  completedBid_ends_with: String
  completedBid_ends_with_nocase: String
  completedBid_not_ends_with: String
  completedBid_not_ends_with_nocase: String
  completedBid_: MarketplaceBid_filter
  bids_: MarketplaceBid_filter
  directBuys_: MarketplaceDirectBuy_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MarketplaceListing_filter]
  or: [MarketplaceListing_filter]
}

enum MarketplaceListing_orderBy {
  id
  listingType
  lister
  token
  token__id
  token__tokenId
  token__setInAllowList
  startTime
  endTime
  quantity
  currency
  reservePricePerToken
  buyoutPricePerToken
  tokenType
  transferType
  rentalExpirationTimestamp
  status
  creationTimestamp
  lastUpdateTimestamp
  completedBid
  completedBid__id
  completedBid__bidder
  completedBid__quantity
  completedBid__totalBidAmount
  completedBid__currency
  completedBid__status
  completedBid__creationTxHash
  completedBid__creationTimestamp
  completedBid__lastUpdateTimestamp
  bids
  directBuys
}

type MarketplaceOffer {
  id: String!
  offeror: Bytes!
  token: Token!
  quantity: BigInt!
  currency: Bytes!
  totalPrice: BigInt!
  tokenType: TokenType!
  transferType: TransferType!
  expirationTimestamp: BigInt!
  rentalExpirationTimestamp: BigInt!
  status: Status!
  revenueTransaction: RevenueTransaction
  referralAdditionalInformation: String
  creationTimestamp: BigInt!
  lastUpdateTimestamp: BigInt!
}

input MarketplaceOffer_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  offeror: Bytes
  offeror_not: Bytes
  offeror_gt: Bytes
  offeror_lt: Bytes
  offeror_gte: Bytes
  offeror_lte: Bytes
  offeror_in: [Bytes!]
  offeror_not_in: [Bytes!]
  offeror_contains: Bytes
  offeror_not_contains: Bytes
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  quantity: BigInt
  quantity_not: BigInt
  quantity_gt: BigInt
  quantity_lt: BigInt
  quantity_gte: BigInt
  quantity_lte: BigInt
  quantity_in: [BigInt!]
  quantity_not_in: [BigInt!]
  currency: Bytes
  currency_not: Bytes
  currency_gt: Bytes
  currency_lt: Bytes
  currency_gte: Bytes
  currency_lte: Bytes
  currency_in: [Bytes!]
  currency_not_in: [Bytes!]
  currency_contains: Bytes
  currency_not_contains: Bytes
  totalPrice: BigInt
  totalPrice_not: BigInt
  totalPrice_gt: BigInt
  totalPrice_lt: BigInt
  totalPrice_gte: BigInt
  totalPrice_lte: BigInt
  totalPrice_in: [BigInt!]
  totalPrice_not_in: [BigInt!]
  tokenType: TokenType
  tokenType_not: TokenType
  tokenType_in: [TokenType!]
  tokenType_not_in: [TokenType!]
  transferType: TransferType
  transferType_not: TransferType
  transferType_in: [TransferType!]
  transferType_not_in: [TransferType!]
  expirationTimestamp: BigInt
  expirationTimestamp_not: BigInt
  expirationTimestamp_gt: BigInt
  expirationTimestamp_lt: BigInt
  expirationTimestamp_gte: BigInt
  expirationTimestamp_lte: BigInt
  expirationTimestamp_in: [BigInt!]
  expirationTimestamp_not_in: [BigInt!]
  rentalExpirationTimestamp: BigInt
  rentalExpirationTimestamp_not: BigInt
  rentalExpirationTimestamp_gt: BigInt
  rentalExpirationTimestamp_lt: BigInt
  rentalExpirationTimestamp_gte: BigInt
  rentalExpirationTimestamp_lte: BigInt
  rentalExpirationTimestamp_in: [BigInt!]
  rentalExpirationTimestamp_not_in: [BigInt!]
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  revenueTransaction: String
  revenueTransaction_not: String
  revenueTransaction_gt: String
  revenueTransaction_lt: String
  revenueTransaction_gte: String
  revenueTransaction_lte: String
  revenueTransaction_in: [String!]
  revenueTransaction_not_in: [String!]
  revenueTransaction_contains: String
  revenueTransaction_contains_nocase: String
  revenueTransaction_not_contains: String
  revenueTransaction_not_contains_nocase: String
  revenueTransaction_starts_with: String
  revenueTransaction_starts_with_nocase: String
  revenueTransaction_not_starts_with: String
  revenueTransaction_not_starts_with_nocase: String
  revenueTransaction_ends_with: String
  revenueTransaction_ends_with_nocase: String
  revenueTransaction_not_ends_with: String
  revenueTransaction_not_ends_with_nocase: String
  revenueTransaction_: RevenueTransaction_filter
  referralAdditionalInformation: String
  referralAdditionalInformation_not: String
  referralAdditionalInformation_gt: String
  referralAdditionalInformation_lt: String
  referralAdditionalInformation_gte: String
  referralAdditionalInformation_lte: String
  referralAdditionalInformation_in: [String!]
  referralAdditionalInformation_not_in: [String!]
  referralAdditionalInformation_contains: String
  referralAdditionalInformation_contains_nocase: String
  referralAdditionalInformation_not_contains: String
  referralAdditionalInformation_not_contains_nocase: String
  referralAdditionalInformation_starts_with: String
  referralAdditionalInformation_starts_with_nocase: String
  referralAdditionalInformation_not_starts_with: String
  referralAdditionalInformation_not_starts_with_nocase: String
  referralAdditionalInformation_ends_with: String
  referralAdditionalInformation_ends_with_nocase: String
  referralAdditionalInformation_not_ends_with: String
  referralAdditionalInformation_not_ends_with_nocase: String
  creationTimestamp: BigInt
  creationTimestamp_not: BigInt
  creationTimestamp_gt: BigInt
  creationTimestamp_lt: BigInt
  creationTimestamp_gte: BigInt
  creationTimestamp_lte: BigInt
  creationTimestamp_in: [BigInt!]
  creationTimestamp_not_in: [BigInt!]
  lastUpdateTimestamp: BigInt
  lastUpdateTimestamp_not: BigInt
  lastUpdateTimestamp_gt: BigInt
  lastUpdateTimestamp_lt: BigInt
  lastUpdateTimestamp_gte: BigInt
  lastUpdateTimestamp_lte: BigInt
  lastUpdateTimestamp_in: [BigInt!]
  lastUpdateTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MarketplaceOffer_filter]
  or: [MarketplaceOffer_filter]
}

enum MarketplaceOffer_orderBy {
  id
  offeror
  token
  token__id
  token__tokenId
  token__setInAllowList
  quantity
  currency
  totalPrice
  tokenType
  transferType
  expirationTimestamp
  rentalExpirationTimestamp
  status
  revenueTransaction
  revenueTransaction__id
  revenueTransaction__blockTimestamp
  referralAdditionalInformation
  creationTimestamp
  lastUpdateTimestamp
}

"""
type Initialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

"""
type Mint {
  id: Bytes!
  contractAddress: Bytes!
  tokenId: BigInt!
  from: Bytes!
  to: Bytes!
  currency: Bytes!
  amount: BigInt!
  tokenData: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  revenueTransaction: RevenueTransaction
  token: Token
}

input Mint_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  contractAddress: Bytes
  contractAddress_not: Bytes
  contractAddress_gt: Bytes
  contractAddress_lt: Bytes
  contractAddress_gte: Bytes
  contractAddress_lte: Bytes
  contractAddress_in: [Bytes!]
  contractAddress_not_in: [Bytes!]
  contractAddress_contains: Bytes
  contractAddress_not_contains: Bytes
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  from: Bytes
  from_not: Bytes
  from_gt: Bytes
  from_lt: Bytes
  from_gte: Bytes
  from_lte: Bytes
  from_in: [Bytes!]
  from_not_in: [Bytes!]
  from_contains: Bytes
  from_not_contains: Bytes
  to: Bytes
  to_not: Bytes
  to_gt: Bytes
  to_lt: Bytes
  to_gte: Bytes
  to_lte: Bytes
  to_in: [Bytes!]
  to_not_in: [Bytes!]
  to_contains: Bytes
  to_not_contains: Bytes
  currency: Bytes
  currency_not: Bytes
  currency_gt: Bytes
  currency_lt: Bytes
  currency_gte: Bytes
  currency_lte: Bytes
  currency_in: [Bytes!]
  currency_not_in: [Bytes!]
  currency_contains: Bytes
  currency_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  tokenData: String
  tokenData_not: String
  tokenData_gt: String
  tokenData_lt: String
  tokenData_gte: String
  tokenData_lte: String
  tokenData_in: [String!]
  tokenData_not_in: [String!]
  tokenData_contains: String
  tokenData_contains_nocase: String
  tokenData_not_contains: String
  tokenData_not_contains_nocase: String
  tokenData_starts_with: String
  tokenData_starts_with_nocase: String
  tokenData_not_starts_with: String
  tokenData_not_starts_with_nocase: String
  tokenData_ends_with: String
  tokenData_ends_with_nocase: String
  tokenData_not_ends_with: String
  tokenData_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  revenueTransaction: String
  revenueTransaction_not: String
  revenueTransaction_gt: String
  revenueTransaction_lt: String
  revenueTransaction_gte: String
  revenueTransaction_lte: String
  revenueTransaction_in: [String!]
  revenueTransaction_not_in: [String!]
  revenueTransaction_contains: String
  revenueTransaction_contains_nocase: String
  revenueTransaction_not_contains: String
  revenueTransaction_not_contains_nocase: String
  revenueTransaction_starts_with: String
  revenueTransaction_starts_with_nocase: String
  revenueTransaction_not_starts_with: String
  revenueTransaction_not_starts_with_nocase: String
  revenueTransaction_ends_with: String
  revenueTransaction_ends_with_nocase: String
  revenueTransaction_not_ends_with: String
  revenueTransaction_not_ends_with_nocase: String
  revenueTransaction_: RevenueTransaction_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Mint_filter]
  or: [Mint_filter]
}

enum Mint_orderBy {
  id
  contractAddress
  tokenId
  from
  to
  currency
  amount
  tokenData
  blockNumber
  blockTimestamp
  transactionHash
  revenueTransaction
  revenueTransaction__id
  revenueTransaction__blockTimestamp
  token
  token__id
  token__tokenId
  token__setInAllowList
}

type NewBid {
  id: Bytes!
  listingId: BigInt!
  bidder: Bytes!
  quantityWanted: BigInt!
  totalBidAmount: BigInt!
  currency: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input NewBid_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  listingId: BigInt
  listingId_not: BigInt
  listingId_gt: BigInt
  listingId_lt: BigInt
  listingId_gte: BigInt
  listingId_lte: BigInt
  listingId_in: [BigInt!]
  listingId_not_in: [BigInt!]
  bidder: Bytes
  bidder_not: Bytes
  bidder_gt: Bytes
  bidder_lt: Bytes
  bidder_gte: Bytes
  bidder_lte: Bytes
  bidder_in: [Bytes!]
  bidder_not_in: [Bytes!]
  bidder_contains: Bytes
  bidder_not_contains: Bytes
  quantityWanted: BigInt
  quantityWanted_not: BigInt
  quantityWanted_gt: BigInt
  quantityWanted_lt: BigInt
  quantityWanted_gte: BigInt
  quantityWanted_lte: BigInt
  quantityWanted_in: [BigInt!]
  quantityWanted_not_in: [BigInt!]
  totalBidAmount: BigInt
  totalBidAmount_not: BigInt
  totalBidAmount_gt: BigInt
  totalBidAmount_lt: BigInt
  totalBidAmount_gte: BigInt
  totalBidAmount_lte: BigInt
  totalBidAmount_in: [BigInt!]
  totalBidAmount_not_in: [BigInt!]
  currency: Bytes
  currency_not: Bytes
  currency_gt: Bytes
  currency_lt: Bytes
  currency_gte: Bytes
  currency_lte: Bytes
  currency_in: [Bytes!]
  currency_not_in: [Bytes!]
  currency_contains: Bytes
  currency_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NewBid_filter]
  or: [NewBid_filter]
}

enum NewBid_orderBy {
  id
  listingId
  bidder
  quantityWanted
  totalBidAmount
  currency
  blockNumber
  blockTimestamp
  transactionHash
}

type NewDSponsorNFT {
  id: Bytes!
  contractAddr: Bytes!
  owner: Bytes!
  name: String!
  symbol: String!
  baseURI: String!
  contractURI: String!
  maxSupply: BigInt!
  minter: Bytes!
  forwarder: Bytes!
  royaltyBps: BigInt!
  currencies: [Bytes!]!
  prices: [BigInt!]!
  allowedTokenIds: [BigInt!]!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input NewDSponsorNFT_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  contractAddr: Bytes
  contractAddr_not: Bytes
  contractAddr_gt: Bytes
  contractAddr_lt: Bytes
  contractAddr_gte: Bytes
  contractAddr_lte: Bytes
  contractAddr_in: [Bytes!]
  contractAddr_not_in: [Bytes!]
  contractAddr_contains: Bytes
  contractAddr_not_contains: Bytes
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  baseURI: String
  baseURI_not: String
  baseURI_gt: String
  baseURI_lt: String
  baseURI_gte: String
  baseURI_lte: String
  baseURI_in: [String!]
  baseURI_not_in: [String!]
  baseURI_contains: String
  baseURI_contains_nocase: String
  baseURI_not_contains: String
  baseURI_not_contains_nocase: String
  baseURI_starts_with: String
  baseURI_starts_with_nocase: String
  baseURI_not_starts_with: String
  baseURI_not_starts_with_nocase: String
  baseURI_ends_with: String
  baseURI_ends_with_nocase: String
  baseURI_not_ends_with: String
  baseURI_not_ends_with_nocase: String
  contractURI: String
  contractURI_not: String
  contractURI_gt: String
  contractURI_lt: String
  contractURI_gte: String
  contractURI_lte: String
  contractURI_in: [String!]
  contractURI_not_in: [String!]
  contractURI_contains: String
  contractURI_contains_nocase: String
  contractURI_not_contains: String
  contractURI_not_contains_nocase: String
  contractURI_starts_with: String
  contractURI_starts_with_nocase: String
  contractURI_not_starts_with: String
  contractURI_not_starts_with_nocase: String
  contractURI_ends_with: String
  contractURI_ends_with_nocase: String
  contractURI_not_ends_with: String
  contractURI_not_ends_with_nocase: String
  maxSupply: BigInt
  maxSupply_not: BigInt
  maxSupply_gt: BigInt
  maxSupply_lt: BigInt
  maxSupply_gte: BigInt
  maxSupply_lte: BigInt
  maxSupply_in: [BigInt!]
  maxSupply_not_in: [BigInt!]
  minter: Bytes
  minter_not: Bytes
  minter_gt: Bytes
  minter_lt: Bytes
  minter_gte: Bytes
  minter_lte: Bytes
  minter_in: [Bytes!]
  minter_not_in: [Bytes!]
  minter_contains: Bytes
  minter_not_contains: Bytes
  forwarder: Bytes
  forwarder_not: Bytes
  forwarder_gt: Bytes
  forwarder_lt: Bytes
  forwarder_gte: Bytes
  forwarder_lte: Bytes
  forwarder_in: [Bytes!]
  forwarder_not_in: [Bytes!]
  forwarder_contains: Bytes
  forwarder_not_contains: Bytes
  royaltyBps: BigInt
  royaltyBps_not: BigInt
  royaltyBps_gt: BigInt
  royaltyBps_lt: BigInt
  royaltyBps_gte: BigInt
  royaltyBps_lte: BigInt
  royaltyBps_in: [BigInt!]
  royaltyBps_not_in: [BigInt!]
  currencies: [Bytes!]
  currencies_not: [Bytes!]
  currencies_contains: [Bytes!]
  currencies_contains_nocase: [Bytes!]
  currencies_not_contains: [Bytes!]
  currencies_not_contains_nocase: [Bytes!]
  prices: [BigInt!]
  prices_not: [BigInt!]
  prices_contains: [BigInt!]
  prices_contains_nocase: [BigInt!]
  prices_not_contains: [BigInt!]
  prices_not_contains_nocase: [BigInt!]
  allowedTokenIds: [BigInt!]
  allowedTokenIds_not: [BigInt!]
  allowedTokenIds_contains: [BigInt!]
  allowedTokenIds_contains_nocase: [BigInt!]
  allowedTokenIds_not_contains: [BigInt!]
  allowedTokenIds_not_contains_nocase: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NewDSponsorNFT_filter]
  or: [NewDSponsorNFT_filter]
}

enum NewDSponsorNFT_orderBy {
  id
  contractAddr
  owner
  name
  symbol
  baseURI
  contractURI
  maxSupply
  minter
  forwarder
  royaltyBps
  currencies
  prices
  allowedTokenIds
  blockNumber
  blockTimestamp
  transactionHash
}

type NewOffer {
  id: Bytes!
  offeror: Bytes!
  offerId: BigInt!
  assetContract: Bytes!
  offer_offerId: BigInt!
  offer_tokenId: BigInt!
  offer_quantity: BigInt!
  offer_totalPrice: BigInt!
  offer_expirationTimestamp: BigInt!
  offer_offeror: Bytes!
  offer_assetContract: Bytes!
  offer_currency: Bytes!
  offer_tokenType: Int!
  offer_transferType: Int!
  offer_rentalExpirationTimestamp: BigInt!
  offer_status: Int!
  offer_referralAdditionalInformation: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input NewOffer_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  offeror: Bytes
  offeror_not: Bytes
  offeror_gt: Bytes
  offeror_lt: Bytes
  offeror_gte: Bytes
  offeror_lte: Bytes
  offeror_in: [Bytes!]
  offeror_not_in: [Bytes!]
  offeror_contains: Bytes
  offeror_not_contains: Bytes
  offerId: BigInt
  offerId_not: BigInt
  offerId_gt: BigInt
  offerId_lt: BigInt
  offerId_gte: BigInt
  offerId_lte: BigInt
  offerId_in: [BigInt!]
  offerId_not_in: [BigInt!]
  assetContract: Bytes
  assetContract_not: Bytes
  assetContract_gt: Bytes
  assetContract_lt: Bytes
  assetContract_gte: Bytes
  assetContract_lte: Bytes
  assetContract_in: [Bytes!]
  assetContract_not_in: [Bytes!]
  assetContract_contains: Bytes
  assetContract_not_contains: Bytes
  offer_offerId: BigInt
  offer_offerId_not: BigInt
  offer_offerId_gt: BigInt
  offer_offerId_lt: BigInt
  offer_offerId_gte: BigInt
  offer_offerId_lte: BigInt
  offer_offerId_in: [BigInt!]
  offer_offerId_not_in: [BigInt!]
  offer_tokenId: BigInt
  offer_tokenId_not: BigInt
  offer_tokenId_gt: BigInt
  offer_tokenId_lt: BigInt
  offer_tokenId_gte: BigInt
  offer_tokenId_lte: BigInt
  offer_tokenId_in: [BigInt!]
  offer_tokenId_not_in: [BigInt!]
  offer_quantity: BigInt
  offer_quantity_not: BigInt
  offer_quantity_gt: BigInt
  offer_quantity_lt: BigInt
  offer_quantity_gte: BigInt
  offer_quantity_lte: BigInt
  offer_quantity_in: [BigInt!]
  offer_quantity_not_in: [BigInt!]
  offer_totalPrice: BigInt
  offer_totalPrice_not: BigInt
  offer_totalPrice_gt: BigInt
  offer_totalPrice_lt: BigInt
  offer_totalPrice_gte: BigInt
  offer_totalPrice_lte: BigInt
  offer_totalPrice_in: [BigInt!]
  offer_totalPrice_not_in: [BigInt!]
  offer_expirationTimestamp: BigInt
  offer_expirationTimestamp_not: BigInt
  offer_expirationTimestamp_gt: BigInt
  offer_expirationTimestamp_lt: BigInt
  offer_expirationTimestamp_gte: BigInt
  offer_expirationTimestamp_lte: BigInt
  offer_expirationTimestamp_in: [BigInt!]
  offer_expirationTimestamp_not_in: [BigInt!]
  offer_offeror: Bytes
  offer_offeror_not: Bytes
  offer_offeror_gt: Bytes
  offer_offeror_lt: Bytes
  offer_offeror_gte: Bytes
  offer_offeror_lte: Bytes
  offer_offeror_in: [Bytes!]
  offer_offeror_not_in: [Bytes!]
  offer_offeror_contains: Bytes
  offer_offeror_not_contains: Bytes
  offer_assetContract: Bytes
  offer_assetContract_not: Bytes
  offer_assetContract_gt: Bytes
  offer_assetContract_lt: Bytes
  offer_assetContract_gte: Bytes
  offer_assetContract_lte: Bytes
  offer_assetContract_in: [Bytes!]
  offer_assetContract_not_in: [Bytes!]
  offer_assetContract_contains: Bytes
  offer_assetContract_not_contains: Bytes
  offer_currency: Bytes
  offer_currency_not: Bytes
  offer_currency_gt: Bytes
  offer_currency_lt: Bytes
  offer_currency_gte: Bytes
  offer_currency_lte: Bytes
  offer_currency_in: [Bytes!]
  offer_currency_not_in: [Bytes!]
  offer_currency_contains: Bytes
  offer_currency_not_contains: Bytes
  offer_tokenType: Int
  offer_tokenType_not: Int
  offer_tokenType_gt: Int
  offer_tokenType_lt: Int
  offer_tokenType_gte: Int
  offer_tokenType_lte: Int
  offer_tokenType_in: [Int!]
  offer_tokenType_not_in: [Int!]
  offer_transferType: Int
  offer_transferType_not: Int
  offer_transferType_gt: Int
  offer_transferType_lt: Int
  offer_transferType_gte: Int
  offer_transferType_lte: Int
  offer_transferType_in: [Int!]
  offer_transferType_not_in: [Int!]
  offer_rentalExpirationTimestamp: BigInt
  offer_rentalExpirationTimestamp_not: BigInt
  offer_rentalExpirationTimestamp_gt: BigInt
  offer_rentalExpirationTimestamp_lt: BigInt
  offer_rentalExpirationTimestamp_gte: BigInt
  offer_rentalExpirationTimestamp_lte: BigInt
  offer_rentalExpirationTimestamp_in: [BigInt!]
  offer_rentalExpirationTimestamp_not_in: [BigInt!]
  offer_status: Int
  offer_status_not: Int
  offer_status_gt: Int
  offer_status_lt: Int
  offer_status_gte: Int
  offer_status_lte: Int
  offer_status_in: [Int!]
  offer_status_not_in: [Int!]
  offer_referralAdditionalInformation: String
  offer_referralAdditionalInformation_not: String
  offer_referralAdditionalInformation_gt: String
  offer_referralAdditionalInformation_lt: String
  offer_referralAdditionalInformation_gte: String
  offer_referralAdditionalInformation_lte: String
  offer_referralAdditionalInformation_in: [String!]
  offer_referralAdditionalInformation_not_in: [String!]
  offer_referralAdditionalInformation_contains: String
  offer_referralAdditionalInformation_contains_nocase: String
  offer_referralAdditionalInformation_not_contains: String
  offer_referralAdditionalInformation_not_contains_nocase: String
  offer_referralAdditionalInformation_starts_with: String
  offer_referralAdditionalInformation_starts_with_nocase: String
  offer_referralAdditionalInformation_not_starts_with: String
  offer_referralAdditionalInformation_not_starts_with_nocase: String
  offer_referralAdditionalInformation_ends_with: String
  offer_referralAdditionalInformation_ends_with_nocase: String
  offer_referralAdditionalInformation_not_ends_with: String
  offer_referralAdditionalInformation_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NewOffer_filter]
  or: [NewOffer_filter]
}

enum NewOffer_orderBy {
  id
  offeror
  offerId
  assetContract
  offer_offerId
  offer_tokenId
  offer_quantity
  offer_totalPrice
  offer_expirationTimestamp
  offer_offeror
  offer_assetContract
  offer_currency
  offer_tokenType
  offer_transferType
  offer_rentalExpirationTimestamp
  offer_status
  offer_referralAdditionalInformation
  blockNumber
  blockTimestamp
  transactionHash
}

type NewSale {
  id: Bytes!
  listingId: BigInt!
  assetContract: Bytes!
  lister: Bytes!
  buyer: Bytes!
  quantityBought: BigInt!
  totalPricePaid: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input NewSale_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  listingId: BigInt
  listingId_not: BigInt
  listingId_gt: BigInt
  listingId_lt: BigInt
  listingId_gte: BigInt
  listingId_lte: BigInt
  listingId_in: [BigInt!]
  listingId_not_in: [BigInt!]
  assetContract: Bytes
  assetContract_not: Bytes
  assetContract_gt: Bytes
  assetContract_lt: Bytes
  assetContract_gte: Bytes
  assetContract_lte: Bytes
  assetContract_in: [Bytes!]
  assetContract_not_in: [Bytes!]
  assetContract_contains: Bytes
  assetContract_not_contains: Bytes
  lister: Bytes
  lister_not: Bytes
  lister_gt: Bytes
  lister_lt: Bytes
  lister_gte: Bytes
  lister_lte: Bytes
  lister_in: [Bytes!]
  lister_not_in: [Bytes!]
  lister_contains: Bytes
  lister_not_contains: Bytes
  buyer: Bytes
  buyer_not: Bytes
  buyer_gt: Bytes
  buyer_lt: Bytes
  buyer_gte: Bytes
  buyer_lte: Bytes
  buyer_in: [Bytes!]
  buyer_not_in: [Bytes!]
  buyer_contains: Bytes
  buyer_not_contains: Bytes
  quantityBought: BigInt
  quantityBought_not: BigInt
  quantityBought_gt: BigInt
  quantityBought_lt: BigInt
  quantityBought_gte: BigInt
  quantityBought_lte: BigInt
  quantityBought_in: [BigInt!]
  quantityBought_not_in: [BigInt!]
  totalPricePaid: BigInt
  totalPricePaid_not: BigInt
  totalPricePaid_gt: BigInt
  totalPricePaid_lt: BigInt
  totalPricePaid_gte: BigInt
  totalPricePaid_lte: BigInt
  totalPricePaid_in: [BigInt!]
  totalPricePaid_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NewSale_filter]
  or: [NewSale_filter]
}

enum NewSale_orderBy {
  id
  listingId
  assetContract
  lister
  buyer
  quantityBought
  totalPricePaid
  blockNumber
  blockTimestamp
  transactionHash
}

type NftContract {
  id: Bytes!
  name: String
  symbol: String
  baseURI: String
  contractURI: String
  maxSupply: BigInt
  minter: Bytes
  forwarder: Bytes
  owner: OwnershipTransferred
  royaltyBps: BigInt
  allowList: Boolean!
  adOffers(skip: Int = 0, first: Int = 100, orderBy: AdOffer_orderBy, orderDirection: OrderDirection, where: AdOffer_filter): [AdOffer!]
  prices(skip: Int = 0, first: Int = 100, orderBy: NftPrice_orderBy, orderDirection: OrderDirection, where: NftPrice_filter): [NftPrice!]
  tokens(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]
}

input NftContract_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  baseURI: String
  baseURI_not: String
  baseURI_gt: String
  baseURI_lt: String
  baseURI_gte: String
  baseURI_lte: String
  baseURI_in: [String!]
  baseURI_not_in: [String!]
  baseURI_contains: String
  baseURI_contains_nocase: String
  baseURI_not_contains: String
  baseURI_not_contains_nocase: String
  baseURI_starts_with: String
  baseURI_starts_with_nocase: String
  baseURI_not_starts_with: String
  baseURI_not_starts_with_nocase: String
  baseURI_ends_with: String
  baseURI_ends_with_nocase: String
  baseURI_not_ends_with: String
  baseURI_not_ends_with_nocase: String
  contractURI: String
  contractURI_not: String
  contractURI_gt: String
  contractURI_lt: String
  contractURI_gte: String
  contractURI_lte: String
  contractURI_in: [String!]
  contractURI_not_in: [String!]
  contractURI_contains: String
  contractURI_contains_nocase: String
  contractURI_not_contains: String
  contractURI_not_contains_nocase: String
  contractURI_starts_with: String
  contractURI_starts_with_nocase: String
  contractURI_not_starts_with: String
  contractURI_not_starts_with_nocase: String
  contractURI_ends_with: String
  contractURI_ends_with_nocase: String
  contractURI_not_ends_with: String
  contractURI_not_ends_with_nocase: String
  maxSupply: BigInt
  maxSupply_not: BigInt
  maxSupply_gt: BigInt
  maxSupply_lt: BigInt
  maxSupply_gte: BigInt
  maxSupply_lte: BigInt
  maxSupply_in: [BigInt!]
  maxSupply_not_in: [BigInt!]
  minter: Bytes
  minter_not: Bytes
  minter_gt: Bytes
  minter_lt: Bytes
  minter_gte: Bytes
  minter_lte: Bytes
  minter_in: [Bytes!]
  minter_not_in: [Bytes!]
  minter_contains: Bytes
  minter_not_contains: Bytes
  forwarder: Bytes
  forwarder_not: Bytes
  forwarder_gt: Bytes
  forwarder_lt: Bytes
  forwarder_gte: Bytes
  forwarder_lte: Bytes
  forwarder_in: [Bytes!]
  forwarder_not_in: [Bytes!]
  forwarder_contains: Bytes
  forwarder_not_contains: Bytes
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: OwnershipTransferred_filter
  royaltyBps: BigInt
  royaltyBps_not: BigInt
  royaltyBps_gt: BigInt
  royaltyBps_lt: BigInt
  royaltyBps_gte: BigInt
  royaltyBps_lte: BigInt
  royaltyBps_in: [BigInt!]
  royaltyBps_not_in: [BigInt!]
  allowList: Boolean
  allowList_not: Boolean
  allowList_in: [Boolean!]
  allowList_not_in: [Boolean!]
  adOffers_: AdOffer_filter
  prices_: NftPrice_filter
  tokens_: Token_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NftContract_filter]
  or: [NftContract_filter]
}

enum NftContract_orderBy {
  id
  name
  symbol
  baseURI
  contractURI
  maxSupply
  minter
  forwarder
  owner
  owner__id
  owner__previousOwner
  owner__newOwner
  owner__blockNumber
  owner__blockTimestamp
  owner__transactionHash
  royaltyBps
  allowList
  adOffers
  prices
  tokens
}

type NftPrice {
  id: String!
  currency: Bytes!
  amount: BigInt!
  enabled: Boolean!
  nftContract: NftContract!
}

input NftPrice_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  currency: Bytes
  currency_not: Bytes
  currency_gt: Bytes
  currency_lt: Bytes
  currency_gte: Bytes
  currency_lte: Bytes
  currency_in: [Bytes!]
  currency_not_in: [Bytes!]
  currency_contains: Bytes
  currency_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  enabled: Boolean
  enabled_not: Boolean
  enabled_in: [Boolean!]
  enabled_not_in: [Boolean!]
  nftContract: String
  nftContract_not: String
  nftContract_gt: String
  nftContract_lt: String
  nftContract_gte: String
  nftContract_lte: String
  nftContract_in: [String!]
  nftContract_not_in: [String!]
  nftContract_contains: String
  nftContract_contains_nocase: String
  nftContract_not_contains: String
  nftContract_not_contains_nocase: String
  nftContract_starts_with: String
  nftContract_starts_with_nocase: String
  nftContract_not_starts_with: String
  nftContract_not_starts_with_nocase: String
  nftContract_ends_with: String
  nftContract_ends_with_nocase: String
  nftContract_not_ends_with: String
  nftContract_not_ends_with_nocase: String
  nftContract_: NftContract_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NftPrice_filter]
  or: [NftPrice_filter]
}

enum NftPrice_orderBy {
  id
  currency
  amount
  enabled
  nftContract
  nftContract__id
  nftContract__name
  nftContract__symbol
  nftContract__baseURI
  nftContract__contractURI
  nftContract__maxSupply
  nftContract__minter
  nftContract__forwarder
  nftContract__royaltyBps
  nftContract__allowList
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type OwnershipTransferred {
  id: Bytes!
  previousOwner: Bytes!
  newOwner: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input OwnershipTransferred_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  previousOwner: Bytes
  previousOwner_not: Bytes
  previousOwner_gt: Bytes
  previousOwner_lt: Bytes
  previousOwner_gte: Bytes
  previousOwner_lte: Bytes
  previousOwner_in: [Bytes!]
  previousOwner_not_in: [Bytes!]
  previousOwner_contains: Bytes
  previousOwner_not_contains: Bytes
  newOwner: Bytes
  newOwner_not: Bytes
  newOwner_gt: Bytes
  newOwner_lt: Bytes
  newOwner_gte: Bytes
  newOwner_lte: Bytes
  newOwner_in: [Bytes!]
  newOwner_not_in: [Bytes!]
  newOwner_contains: Bytes
  newOwner_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [OwnershipTransferred_filter]
  or: [OwnershipTransferred_filter]
}

enum OwnershipTransferred_orderBy {
  id
  previousOwner
  newOwner
  blockNumber
  blockTimestamp
  transactionHash
}

type Query {
  adOffer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AdOffer
  adOffers(
    skip: Int = 0
    first: Int = 100
    orderBy: AdOffer_orderBy
    orderDirection: OrderDirection
    where: AdOffer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AdOffer!]!
  adParameter(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AdParameter
  adParameters(
    skip: Int = 0
    first: Int = 100
    orderBy: AdParameter_orderBy
    orderDirection: OrderDirection
    where: AdParameter_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AdParameter!]!
  adProposal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AdProposal
  adProposals(
    skip: Int = 0
    first: Int = 100
    orderBy: AdProposal_orderBy
    orderDirection: OrderDirection
    where: AdProposal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AdProposal!]!
  currentProposal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CurrentProposal
  currentProposals(
    skip: Int = 0
    first: Int = 100
    orderBy: CurrentProposal_orderBy
    orderDirection: OrderDirection
    where: CurrentProposal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CurrentProposal!]!
  nftContract(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NftContract
  nftContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: NftContract_orderBy
    orderDirection: OrderDirection
    where: NftContract_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NftContract!]!
  nftPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NftPrice
  nftPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: NftPrice_orderBy
    orderDirection: OrderDirection
    where: NftPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NftPrice!]!
  marketplaceBid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketplaceBid
  marketplaceBids(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketplaceBid_orderBy
    orderDirection: OrderDirection
    where: MarketplaceBid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketplaceBid!]!
  marketplaceDirectBuy(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketplaceDirectBuy
  marketplaceDirectBuys(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketplaceDirectBuy_orderBy
    orderDirection: OrderDirection
    where: MarketplaceDirectBuy_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketplaceDirectBuy!]!
  marketplaceListing(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketplaceListing
  marketplaceListings(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketplaceListing_orderBy
    orderDirection: OrderDirection
    where: MarketplaceListing_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketplaceListing!]!
  marketplaceOffer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketplaceOffer
  marketplaceOffers(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketplaceOffer_orderBy
    orderDirection: OrderDirection
    where: MarketplaceOffer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketplaceOffer!]!
  revenueTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RevenueTransaction
  revenueTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: RevenueTransaction_orderBy
    orderDirection: OrderDirection
    where: RevenueTransaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RevenueTransaction!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  tokenPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenPrice
  tokenPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenPrice_orderBy
    orderDirection: OrderDirection
    where: TokenPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenPrice!]!
  callWithProtocolFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CallWithProtocolFee
  callWithProtocolFees(
    skip: Int = 0
    first: Int = 100
    orderBy: CallWithProtocolFee_orderBy
    orderDirection: OrderDirection
    where: CallWithProtocolFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CallWithProtocolFee!]!
  feeUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeeUpdate
  feeUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: FeeUpdate_orderBy
    orderDirection: OrderDirection
    where: FeeUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeeUpdate!]!
  ownershipTransferred(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OwnershipTransferred
  ownershipTransferreds(
    skip: Int = 0
    first: Int = 100
    orderBy: OwnershipTransferred_orderBy
    orderDirection: OrderDirection
    where: OwnershipTransferred_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OwnershipTransferred!]!
  updateAdProposal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateAdProposal
  updateAdProposals(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdateAdProposal_orderBy
    orderDirection: OrderDirection
    where: UpdateAdProposal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdateAdProposal!]!
  updateAdValidation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateAdValidation
  updateAdValidations(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdateAdValidation_orderBy
    orderDirection: OrderDirection
    where: UpdateAdValidation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdateAdValidation!]!
  updateOffer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateOffer
  updateOffers(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdateOffer_orderBy
    orderDirection: OrderDirection
    where: UpdateOffer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdateOffer!]!
  updateOfferAdParameter(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateOfferAdParameter
  updateOfferAdParameters(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdateOfferAdParameter_orderBy
    orderDirection: OrderDirection
    where: UpdateOfferAdParameter_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdateOfferAdParameter!]!
  updateOfferAdmin(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateOfferAdmin
  updateOfferAdmins(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdateOfferAdmin_orderBy
    orderDirection: OrderDirection
    where: UpdateOfferAdmin_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdateOfferAdmin!]!
  updateOfferValidator(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateOfferValidator
  updateOfferValidators(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdateOfferValidator_orderBy
    orderDirection: OrderDirection
    where: UpdateOfferValidator_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdateOfferValidator!]!
  newDSponsorNFT(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NewDSponsorNFT
  newDSponsorNFTs(
    skip: Int = 0
    first: Int = 100
    orderBy: NewDSponsorNFT_orderBy
    orderDirection: OrderDirection
    where: NewDSponsorNFT_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NewDSponsorNFT!]!
  contractURIUpdated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ContractURIUpdated
  contractURIUpdateds(
    skip: Int = 0
    first: Int = 100
    orderBy: ContractURIUpdated_orderBy
    orderDirection: OrderDirection
    where: ContractURIUpdated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ContractURIUpdated!]!
  mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Mint
  mints(
    skip: Int = 0
    first: Int = 100
    orderBy: Mint_orderBy
    orderDirection: OrderDirection
    where: Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Mint!]!
  tokensAllowlist(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokensAllowlist
  tokensAllowlists(
    skip: Int = 0
    first: Int = 100
    orderBy: TokensAllowlist_orderBy
    orderDirection: OrderDirection
    where: TokensAllowlist_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokensAllowlist!]!
  tokensAllowlistUpdated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokensAllowlistUpdated
  tokensAllowlistUpdateds(
    skip: Int = 0
    first: Int = 100
    orderBy: TokensAllowlistUpdated_orderBy
    orderDirection: OrderDirection
    where: TokensAllowlistUpdated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokensAllowlistUpdated!]!
  updateDefaultMintPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateDefaultMintPrice
  updateDefaultMintPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdateDefaultMintPrice_orderBy
    orderDirection: OrderDirection
    where: UpdateDefaultMintPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdateDefaultMintPrice!]!
  updateMintPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateMintPrice
  updateMintPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdateMintPrice_orderBy
    orderDirection: OrderDirection
    where: UpdateMintPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdateMintPrice!]!
  updateUser(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateUser
  updateUsers(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdateUser_orderBy
    orderDirection: OrderDirection
    where: UpdateUser_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdateUser!]!
  acceptedOffer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AcceptedOffer
  acceptedOffers(
    skip: Int = 0
    first: Int = 100
    orderBy: AcceptedOffer_orderBy
    orderDirection: OrderDirection
    where: AcceptedOffer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AcceptedOffer!]!
  auctionClosed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AuctionClosed
  auctionCloseds(
    skip: Int = 0
    first: Int = 100
    orderBy: AuctionClosed_orderBy
    orderDirection: OrderDirection
    where: AuctionClosed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AuctionClosed!]!
  cancelledOffer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CancelledOffer
  cancelledOffers(
    skip: Int = 0
    first: Int = 100
    orderBy: CancelledOffer_orderBy
    orderDirection: OrderDirection
    where: CancelledOffer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CancelledOffer!]!
  listingAdded(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ListingAdded
  listingAddeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ListingAdded_orderBy
    orderDirection: OrderDirection
    where: ListingAdded_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ListingAdded!]!
  listingRemoved(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ListingRemoved
  listingRemoveds(
    skip: Int = 0
    first: Int = 100
    orderBy: ListingRemoved_orderBy
    orderDirection: OrderDirection
    where: ListingRemoved_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ListingRemoved!]!
  listingUpdated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ListingUpdated
  listingUpdateds(
    skip: Int = 0
    first: Int = 100
    orderBy: ListingUpdated_orderBy
    orderDirection: OrderDirection
    where: ListingUpdated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ListingUpdated!]!
  newBid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NewBid
  newBids(
    skip: Int = 0
    first: Int = 100
    orderBy: NewBid_orderBy
    orderDirection: OrderDirection
    where: NewBid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NewBid!]!
  newOffer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NewOffer
  newOffers(
    skip: Int = 0
    first: Int = 100
    orderBy: NewOffer_orderBy
    orderDirection: OrderDirection
    where: NewOffer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NewOffer!]!
  newSale(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NewSale
  newSales(
    skip: Int = 0
    first: Int = 100
    orderBy: NewSale_orderBy
    orderDirection: OrderDirection
    where: NewSale_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NewSale!]!
  offerSearch(
    text: String!
    first: Int = 100
    skip: Int = 0
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    where: AdOffer_filter
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AdOffer!]!
  offerSearchFR(
    text: String!
    first: Int = 100
    skip: Int = 0
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    where: AdOffer_filter
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AdOffer!]!
  offerSearchEN(
    text: String!
    first: Int = 100
    skip: Int = 0
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    where: AdOffer_filter
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AdOffer!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type RevenueTransaction {
  id: Bytes!
  blockTimestamp: BigInt!
  protocolFees(skip: Int = 0, first: Int = 100, orderBy: CallWithProtocolFee_orderBy, orderDirection: OrderDirection, where: CallWithProtocolFee_filter): [CallWithProtocolFee!]
  marketplaceBids(skip: Int = 0, first: Int = 100, orderBy: MarketplaceBid_orderBy, orderDirection: OrderDirection, where: MarketplaceBid_filter): [MarketplaceBid!]
  marketplaceDirectBuys(skip: Int = 0, first: Int = 100, orderBy: MarketplaceDirectBuy_orderBy, orderDirection: OrderDirection, where: MarketplaceDirectBuy_filter): [MarketplaceDirectBuy!]
  marketplaceOffers(skip: Int = 0, first: Int = 100, orderBy: MarketplaceOffer_orderBy, orderDirection: OrderDirection, where: MarketplaceOffer_filter): [MarketplaceOffer!]
  mints(skip: Int = 0, first: Int = 100, orderBy: Mint_orderBy, orderDirection: OrderDirection, where: Mint_filter): [Mint!]
}

input RevenueTransaction_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  protocolFees_: CallWithProtocolFee_filter
  marketplaceBids_: MarketplaceBid_filter
  marketplaceDirectBuys_: MarketplaceDirectBuy_filter
  marketplaceOffers_: MarketplaceOffer_filter
  mints_: Mint_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RevenueTransaction_filter]
  or: [RevenueTransaction_filter]
}

enum RevenueTransaction_orderBy {
  id
  blockTimestamp
  protocolFees
  marketplaceBids
  marketplaceDirectBuys
  marketplaceOffers
  mints
}

enum Status {
  UNSET
  CREATED
  COMPLETED
  CANCELLED
}

type Subscription {
  adOffer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AdOffer
  adOffers(
    skip: Int = 0
    first: Int = 100
    orderBy: AdOffer_orderBy
    orderDirection: OrderDirection
    where: AdOffer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AdOffer!]!
  adParameter(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AdParameter
  adParameters(
    skip: Int = 0
    first: Int = 100
    orderBy: AdParameter_orderBy
    orderDirection: OrderDirection
    where: AdParameter_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AdParameter!]!
  adProposal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AdProposal
  adProposals(
    skip: Int = 0
    first: Int = 100
    orderBy: AdProposal_orderBy
    orderDirection: OrderDirection
    where: AdProposal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AdProposal!]!
  currentProposal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CurrentProposal
  currentProposals(
    skip: Int = 0
    first: Int = 100
    orderBy: CurrentProposal_orderBy
    orderDirection: OrderDirection
    where: CurrentProposal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CurrentProposal!]!
  nftContract(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NftContract
  nftContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: NftContract_orderBy
    orderDirection: OrderDirection
    where: NftContract_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NftContract!]!
  nftPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NftPrice
  nftPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: NftPrice_orderBy
    orderDirection: OrderDirection
    where: NftPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NftPrice!]!
  marketplaceBid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketplaceBid
  marketplaceBids(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketplaceBid_orderBy
    orderDirection: OrderDirection
    where: MarketplaceBid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketplaceBid!]!
  marketplaceDirectBuy(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketplaceDirectBuy
  marketplaceDirectBuys(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketplaceDirectBuy_orderBy
    orderDirection: OrderDirection
    where: MarketplaceDirectBuy_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketplaceDirectBuy!]!
  marketplaceListing(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketplaceListing
  marketplaceListings(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketplaceListing_orderBy
    orderDirection: OrderDirection
    where: MarketplaceListing_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketplaceListing!]!
  marketplaceOffer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketplaceOffer
  marketplaceOffers(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketplaceOffer_orderBy
    orderDirection: OrderDirection
    where: MarketplaceOffer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketplaceOffer!]!
  revenueTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RevenueTransaction
  revenueTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: RevenueTransaction_orderBy
    orderDirection: OrderDirection
    where: RevenueTransaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RevenueTransaction!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  tokenPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenPrice
  tokenPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenPrice_orderBy
    orderDirection: OrderDirection
    where: TokenPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenPrice!]!
  callWithProtocolFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CallWithProtocolFee
  callWithProtocolFees(
    skip: Int = 0
    first: Int = 100
    orderBy: CallWithProtocolFee_orderBy
    orderDirection: OrderDirection
    where: CallWithProtocolFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CallWithProtocolFee!]!
  feeUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeeUpdate
  feeUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: FeeUpdate_orderBy
    orderDirection: OrderDirection
    where: FeeUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeeUpdate!]!
  ownershipTransferred(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OwnershipTransferred
  ownershipTransferreds(
    skip: Int = 0
    first: Int = 100
    orderBy: OwnershipTransferred_orderBy
    orderDirection: OrderDirection
    where: OwnershipTransferred_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OwnershipTransferred!]!
  updateAdProposal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateAdProposal
  updateAdProposals(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdateAdProposal_orderBy
    orderDirection: OrderDirection
    where: UpdateAdProposal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdateAdProposal!]!
  updateAdValidation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateAdValidation
  updateAdValidations(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdateAdValidation_orderBy
    orderDirection: OrderDirection
    where: UpdateAdValidation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdateAdValidation!]!
  updateOffer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateOffer
  updateOffers(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdateOffer_orderBy
    orderDirection: OrderDirection
    where: UpdateOffer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdateOffer!]!
  updateOfferAdParameter(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateOfferAdParameter
  updateOfferAdParameters(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdateOfferAdParameter_orderBy
    orderDirection: OrderDirection
    where: UpdateOfferAdParameter_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdateOfferAdParameter!]!
  updateOfferAdmin(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateOfferAdmin
  updateOfferAdmins(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdateOfferAdmin_orderBy
    orderDirection: OrderDirection
    where: UpdateOfferAdmin_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdateOfferAdmin!]!
  updateOfferValidator(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateOfferValidator
  updateOfferValidators(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdateOfferValidator_orderBy
    orderDirection: OrderDirection
    where: UpdateOfferValidator_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdateOfferValidator!]!
  newDSponsorNFT(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NewDSponsorNFT
  newDSponsorNFTs(
    skip: Int = 0
    first: Int = 100
    orderBy: NewDSponsorNFT_orderBy
    orderDirection: OrderDirection
    where: NewDSponsorNFT_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NewDSponsorNFT!]!
  contractURIUpdated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ContractURIUpdated
  contractURIUpdateds(
    skip: Int = 0
    first: Int = 100
    orderBy: ContractURIUpdated_orderBy
    orderDirection: OrderDirection
    where: ContractURIUpdated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ContractURIUpdated!]!
  mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Mint
  mints(
    skip: Int = 0
    first: Int = 100
    orderBy: Mint_orderBy
    orderDirection: OrderDirection
    where: Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Mint!]!
  tokensAllowlist(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokensAllowlist
  tokensAllowlists(
    skip: Int = 0
    first: Int = 100
    orderBy: TokensAllowlist_orderBy
    orderDirection: OrderDirection
    where: TokensAllowlist_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokensAllowlist!]!
  tokensAllowlistUpdated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokensAllowlistUpdated
  tokensAllowlistUpdateds(
    skip: Int = 0
    first: Int = 100
    orderBy: TokensAllowlistUpdated_orderBy
    orderDirection: OrderDirection
    where: TokensAllowlistUpdated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokensAllowlistUpdated!]!
  updateDefaultMintPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateDefaultMintPrice
  updateDefaultMintPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdateDefaultMintPrice_orderBy
    orderDirection: OrderDirection
    where: UpdateDefaultMintPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdateDefaultMintPrice!]!
  updateMintPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateMintPrice
  updateMintPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdateMintPrice_orderBy
    orderDirection: OrderDirection
    where: UpdateMintPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdateMintPrice!]!
  updateUser(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateUser
  updateUsers(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdateUser_orderBy
    orderDirection: OrderDirection
    where: UpdateUser_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdateUser!]!
  acceptedOffer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AcceptedOffer
  acceptedOffers(
    skip: Int = 0
    first: Int = 100
    orderBy: AcceptedOffer_orderBy
    orderDirection: OrderDirection
    where: AcceptedOffer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AcceptedOffer!]!
  auctionClosed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AuctionClosed
  auctionCloseds(
    skip: Int = 0
    first: Int = 100
    orderBy: AuctionClosed_orderBy
    orderDirection: OrderDirection
    where: AuctionClosed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AuctionClosed!]!
  cancelledOffer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CancelledOffer
  cancelledOffers(
    skip: Int = 0
    first: Int = 100
    orderBy: CancelledOffer_orderBy
    orderDirection: OrderDirection
    where: CancelledOffer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CancelledOffer!]!
  listingAdded(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ListingAdded
  listingAddeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ListingAdded_orderBy
    orderDirection: OrderDirection
    where: ListingAdded_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ListingAdded!]!
  listingRemoved(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ListingRemoved
  listingRemoveds(
    skip: Int = 0
    first: Int = 100
    orderBy: ListingRemoved_orderBy
    orderDirection: OrderDirection
    where: ListingRemoved_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ListingRemoved!]!
  listingUpdated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ListingUpdated
  listingUpdateds(
    skip: Int = 0
    first: Int = 100
    orderBy: ListingUpdated_orderBy
    orderDirection: OrderDirection
    where: ListingUpdated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ListingUpdated!]!
  newBid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NewBid
  newBids(
    skip: Int = 0
    first: Int = 100
    orderBy: NewBid_orderBy
    orderDirection: OrderDirection
    where: NewBid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NewBid!]!
  newOffer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NewOffer
  newOffers(
    skip: Int = 0
    first: Int = 100
    orderBy: NewOffer_orderBy
    orderDirection: OrderDirection
    where: NewOffer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NewOffer!]!
  newSale(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NewSale
  newSales(
    skip: Int = 0
    first: Int = 100
    orderBy: NewSale_orderBy
    orderDirection: OrderDirection
    where: NewSale_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NewSale!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type Token {
  id: String!
  nftContract: NftContract!
  tokenId: BigInt!
  setInAllowList: Boolean!
  mint: Mint
  user: UpdateUser
  prices(skip: Int = 0, first: Int = 100, orderBy: TokenPrice_orderBy, orderDirection: OrderDirection, where: TokenPrice_filter): [TokenPrice!]
  currentProposals(skip: Int = 0, first: Int = 100, orderBy: CurrentProposal_orderBy, orderDirection: OrderDirection, where: CurrentProposal_filter): [CurrentProposal!]
  allProposals(skip: Int = 0, first: Int = 100, orderBy: AdProposal_orderBy, orderDirection: OrderDirection, where: AdProposal_filter): [AdProposal!]
  marketplaceListings(skip: Int = 0, first: Int = 100, orderBy: MarketplaceListing_orderBy, orderDirection: OrderDirection, where: MarketplaceListing_filter): [MarketplaceListing!]
  marketplaceOffers(skip: Int = 0, first: Int = 100, orderBy: MarketplaceOffer_orderBy, orderDirection: OrderDirection, where: MarketplaceOffer_filter): [MarketplaceOffer!]
}

type TokenPrice {
  id: String!
  currency: Bytes!
  amount: BigInt!
  enabled: Boolean!
  token: Token!
}

input TokenPrice_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  currency: Bytes
  currency_not: Bytes
  currency_gt: Bytes
  currency_lt: Bytes
  currency_gte: Bytes
  currency_lte: Bytes
  currency_in: [Bytes!]
  currency_not_in: [Bytes!]
  currency_contains: Bytes
  currency_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  enabled: Boolean
  enabled_not: Boolean
  enabled_in: [Boolean!]
  enabled_not_in: [Boolean!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenPrice_filter]
  or: [TokenPrice_filter]
}

enum TokenPrice_orderBy {
  id
  currency
  amount
  enabled
  token
  token__id
  token__tokenId
  token__setInAllowList
}

enum TokenType {
  ERC1155
  ERC721
  ERC20
}

input Token_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  nftContract: String
  nftContract_not: String
  nftContract_gt: String
  nftContract_lt: String
  nftContract_gte: String
  nftContract_lte: String
  nftContract_in: [String!]
  nftContract_not_in: [String!]
  nftContract_contains: String
  nftContract_contains_nocase: String
  nftContract_not_contains: String
  nftContract_not_contains_nocase: String
  nftContract_starts_with: String
  nftContract_starts_with_nocase: String
  nftContract_not_starts_with: String
  nftContract_not_starts_with_nocase: String
  nftContract_ends_with: String
  nftContract_ends_with_nocase: String
  nftContract_not_ends_with: String
  nftContract_not_ends_with_nocase: String
  nftContract_: NftContract_filter
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  setInAllowList: Boolean
  setInAllowList_not: Boolean
  setInAllowList_in: [Boolean!]
  setInAllowList_not_in: [Boolean!]
  mint: String
  mint_not: String
  mint_gt: String
  mint_lt: String
  mint_gte: String
  mint_lte: String
  mint_in: [String!]
  mint_not_in: [String!]
  mint_contains: String
  mint_contains_nocase: String
  mint_not_contains: String
  mint_not_contains_nocase: String
  mint_starts_with: String
  mint_starts_with_nocase: String
  mint_not_starts_with: String
  mint_not_starts_with_nocase: String
  mint_ends_with: String
  mint_ends_with_nocase: String
  mint_not_ends_with: String
  mint_not_ends_with_nocase: String
  mint_: Mint_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: UpdateUser_filter
  prices_: TokenPrice_filter
  currentProposals_: CurrentProposal_filter
  allProposals_: AdProposal_filter
  marketplaceListings_: MarketplaceListing_filter
  marketplaceOffers_: MarketplaceOffer_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Token_filter]
  or: [Token_filter]
}

enum Token_orderBy {
  id
  nftContract
  nftContract__id
  nftContract__name
  nftContract__symbol
  nftContract__baseURI
  nftContract__contractURI
  nftContract__maxSupply
  nftContract__minter
  nftContract__forwarder
  nftContract__royaltyBps
  nftContract__allowList
  tokenId
  setInAllowList
  mint
  mint__id
  mint__contractAddress
  mint__tokenId
  mint__from
  mint__to
  mint__currency
  mint__amount
  mint__tokenData
  mint__blockNumber
  mint__blockTimestamp
  mint__transactionHash
  user
  user__id
  user__tokenId
  user__user
  user__expires
  user__blockNumber
  user__blockTimestamp
  user__transactionHash
  prices
  currentProposals
  allProposals
  marketplaceListings
  marketplaceOffers
}

type TokensAllowlist {
  id: Bytes!
  allowed: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokensAllowlistUpdated {
  id: Bytes!
  tokenId: BigInt!
  allowed: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input TokensAllowlistUpdated_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  allowed: Boolean
  allowed_not: Boolean
  allowed_in: [Boolean!]
  allowed_not_in: [Boolean!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokensAllowlistUpdated_filter]
  or: [TokensAllowlistUpdated_filter]
}

enum TokensAllowlistUpdated_orderBy {
  id
  tokenId
  allowed
  blockNumber
  blockTimestamp
  transactionHash
}

input TokensAllowlist_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  allowed: Boolean
  allowed_not: Boolean
  allowed_in: [Boolean!]
  allowed_not_in: [Boolean!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokensAllowlist_filter]
  or: [TokensAllowlist_filter]
}

enum TokensAllowlist_orderBy {
  id
  allowed
  blockNumber
  blockTimestamp
  transactionHash
}

enum TransferType {
  Rent
  Sale
}

type UpdateAdProposal {
  id: Bytes!
  offerId: BigInt!
  tokenId: BigInt!
  proposalId: BigInt!
  adParameter: String!
  data: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input UpdateAdProposal_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  offerId: BigInt
  offerId_not: BigInt
  offerId_gt: BigInt
  offerId_lt: BigInt
  offerId_gte: BigInt
  offerId_lte: BigInt
  offerId_in: [BigInt!]
  offerId_not_in: [BigInt!]
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  proposalId: BigInt
  proposalId_not: BigInt
  proposalId_gt: BigInt
  proposalId_lt: BigInt
  proposalId_gte: BigInt
  proposalId_lte: BigInt
  proposalId_in: [BigInt!]
  proposalId_not_in: [BigInt!]
  adParameter: String
  adParameter_not: String
  adParameter_gt: String
  adParameter_lt: String
  adParameter_gte: String
  adParameter_lte: String
  adParameter_in: [String!]
  adParameter_not_in: [String!]
  adParameter_contains: String
  adParameter_contains_nocase: String
  adParameter_not_contains: String
  adParameter_not_contains_nocase: String
  adParameter_starts_with: String
  adParameter_starts_with_nocase: String
  adParameter_not_starts_with: String
  adParameter_not_starts_with_nocase: String
  adParameter_ends_with: String
  adParameter_ends_with_nocase: String
  adParameter_not_ends_with: String
  adParameter_not_ends_with_nocase: String
  data: String
  data_not: String
  data_gt: String
  data_lt: String
  data_gte: String
  data_lte: String
  data_in: [String!]
  data_not_in: [String!]
  data_contains: String
  data_contains_nocase: String
  data_not_contains: String
  data_not_contains_nocase: String
  data_starts_with: String
  data_starts_with_nocase: String
  data_not_starts_with: String
  data_not_starts_with_nocase: String
  data_ends_with: String
  data_ends_with_nocase: String
  data_not_ends_with: String
  data_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UpdateAdProposal_filter]
  or: [UpdateAdProposal_filter]
}

enum UpdateAdProposal_orderBy {
  id
  offerId
  tokenId
  proposalId
  adParameter
  data
  blockNumber
  blockTimestamp
  transactionHash
}

type UpdateAdValidation {
  id: Bytes!
  offerId: BigInt!
  tokenId: BigInt!
  proposalId: BigInt!
  adParameter: String!
  validated: Boolean!
  reason: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input UpdateAdValidation_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  offerId: BigInt
  offerId_not: BigInt
  offerId_gt: BigInt
  offerId_lt: BigInt
  offerId_gte: BigInt
  offerId_lte: BigInt
  offerId_in: [BigInt!]
  offerId_not_in: [BigInt!]
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  proposalId: BigInt
  proposalId_not: BigInt
  proposalId_gt: BigInt
  proposalId_lt: BigInt
  proposalId_gte: BigInt
  proposalId_lte: BigInt
  proposalId_in: [BigInt!]
  proposalId_not_in: [BigInt!]
  adParameter: String
  adParameter_not: String
  adParameter_gt: String
  adParameter_lt: String
  adParameter_gte: String
  adParameter_lte: String
  adParameter_in: [String!]
  adParameter_not_in: [String!]
  adParameter_contains: String
  adParameter_contains_nocase: String
  adParameter_not_contains: String
  adParameter_not_contains_nocase: String
  adParameter_starts_with: String
  adParameter_starts_with_nocase: String
  adParameter_not_starts_with: String
  adParameter_not_starts_with_nocase: String
  adParameter_ends_with: String
  adParameter_ends_with_nocase: String
  adParameter_not_ends_with: String
  adParameter_not_ends_with_nocase: String
  validated: Boolean
  validated_not: Boolean
  validated_in: [Boolean!]
  validated_not_in: [Boolean!]
  reason: String
  reason_not: String
  reason_gt: String
  reason_lt: String
  reason_gte: String
  reason_lte: String
  reason_in: [String!]
  reason_not_in: [String!]
  reason_contains: String
  reason_contains_nocase: String
  reason_not_contains: String
  reason_not_contains_nocase: String
  reason_starts_with: String
  reason_starts_with_nocase: String
  reason_not_starts_with: String
  reason_not_starts_with_nocase: String
  reason_ends_with: String
  reason_ends_with_nocase: String
  reason_not_ends_with: String
  reason_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UpdateAdValidation_filter]
  or: [UpdateAdValidation_filter]
}

enum UpdateAdValidation_orderBy {
  id
  offerId
  tokenId
  proposalId
  adParameter
  validated
  reason
  blockNumber
  blockTimestamp
  transactionHash
}

"""
type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

"""
type UpdateDefaultMintPrice {
  id: Bytes!
  currency: Bytes!
  enabled: Boolean!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input UpdateDefaultMintPrice_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  currency: Bytes
  currency_not: Bytes
  currency_gt: Bytes
  currency_lt: Bytes
  currency_gte: Bytes
  currency_lte: Bytes
  currency_in: [Bytes!]
  currency_not_in: [Bytes!]
  currency_contains: Bytes
  currency_not_contains: Bytes
  enabled: Boolean
  enabled_not: Boolean
  enabled_in: [Boolean!]
  enabled_not_in: [Boolean!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UpdateDefaultMintPrice_filter]
  or: [UpdateDefaultMintPrice_filter]
}

enum UpdateDefaultMintPrice_orderBy {
  id
  currency
  enabled
  amount
  blockNumber
  blockTimestamp
  transactionHash
}

type UpdateMintPrice {
  id: Bytes!
  tokenId: BigInt!
  currency: Bytes!
  enabled: Boolean!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input UpdateMintPrice_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  currency: Bytes
  currency_not: Bytes
  currency_gt: Bytes
  currency_lt: Bytes
  currency_gte: Bytes
  currency_lte: Bytes
  currency_in: [Bytes!]
  currency_not_in: [Bytes!]
  currency_contains: Bytes
  currency_not_contains: Bytes
  enabled: Boolean
  enabled_not: Boolean
  enabled_in: [Boolean!]
  enabled_not_in: [Boolean!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UpdateMintPrice_filter]
  or: [UpdateMintPrice_filter]
}

enum UpdateMintPrice_orderBy {
  id
  tokenId
  currency
  enabled
  amount
  blockNumber
  blockTimestamp
  transactionHash
}

type UpdateOffer {
  id: Bytes!
  offerId: BigInt!
  disable: Boolean!
  name: String!
  offerMetadata: String!
  nftContract: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateOfferAdParameter {
  id: Bytes!
  offerId: BigInt!
  adParameter: String!
  enable: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input UpdateOfferAdParameter_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  offerId: BigInt
  offerId_not: BigInt
  offerId_gt: BigInt
  offerId_lt: BigInt
  offerId_gte: BigInt
  offerId_lte: BigInt
  offerId_in: [BigInt!]
  offerId_not_in: [BigInt!]
  adParameter: String
  adParameter_not: String
  adParameter_gt: String
  adParameter_lt: String
  adParameter_gte: String
  adParameter_lte: String
  adParameter_in: [String!]
  adParameter_not_in: [String!]
  adParameter_contains: String
  adParameter_contains_nocase: String
  adParameter_not_contains: String
  adParameter_not_contains_nocase: String
  adParameter_starts_with: String
  adParameter_starts_with_nocase: String
  adParameter_not_starts_with: String
  adParameter_not_starts_with_nocase: String
  adParameter_ends_with: String
  adParameter_ends_with_nocase: String
  adParameter_not_ends_with: String
  adParameter_not_ends_with_nocase: String
  enable: Boolean
  enable_not: Boolean
  enable_in: [Boolean!]
  enable_not_in: [Boolean!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UpdateOfferAdParameter_filter]
  or: [UpdateOfferAdParameter_filter]
}

enum UpdateOfferAdParameter_orderBy {
  id
  offerId
  adParameter
  enable
  blockNumber
  blockTimestamp
  transactionHash
}

type UpdateOfferAdmin {
  id: Bytes!
  offerId: BigInt!
  admin: Bytes!
  enable: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input UpdateOfferAdmin_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  offerId: BigInt
  offerId_not: BigInt
  offerId_gt: BigInt
  offerId_lt: BigInt
  offerId_gte: BigInt
  offerId_lte: BigInt
  offerId_in: [BigInt!]
  offerId_not_in: [BigInt!]
  admin: Bytes
  admin_not: Bytes
  admin_gt: Bytes
  admin_lt: Bytes
  admin_gte: Bytes
  admin_lte: Bytes
  admin_in: [Bytes!]
  admin_not_in: [Bytes!]
  admin_contains: Bytes
  admin_not_contains: Bytes
  enable: Boolean
  enable_not: Boolean
  enable_in: [Boolean!]
  enable_not_in: [Boolean!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UpdateOfferAdmin_filter]
  or: [UpdateOfferAdmin_filter]
}

enum UpdateOfferAdmin_orderBy {
  id
  offerId
  admin
  enable
  blockNumber
  blockTimestamp
  transactionHash
}

type UpdateOfferValidator {
  id: Bytes!
  offerId: BigInt!
  validator: Bytes!
  enable: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input UpdateOfferValidator_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  offerId: BigInt
  offerId_not: BigInt
  offerId_gt: BigInt
  offerId_lt: BigInt
  offerId_gte: BigInt
  offerId_lte: BigInt
  offerId_in: [BigInt!]
  offerId_not_in: [BigInt!]
  validator: Bytes
  validator_not: Bytes
  validator_gt: Bytes
  validator_lt: Bytes
  validator_gte: Bytes
  validator_lte: Bytes
  validator_in: [Bytes!]
  validator_not_in: [Bytes!]
  validator_contains: Bytes
  validator_not_contains: Bytes
  enable: Boolean
  enable_not: Boolean
  enable_in: [Boolean!]
  enable_not_in: [Boolean!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UpdateOfferValidator_filter]
  or: [UpdateOfferValidator_filter]
}

enum UpdateOfferValidator_orderBy {
  id
  offerId
  validator
  enable
  blockNumber
  blockTimestamp
  transactionHash
}

input UpdateOffer_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  offerId: BigInt
  offerId_not: BigInt
  offerId_gt: BigInt
  offerId_lt: BigInt
  offerId_gte: BigInt
  offerId_lte: BigInt
  offerId_in: [BigInt!]
  offerId_not_in: [BigInt!]
  disable: Boolean
  disable_not: Boolean
  disable_in: [Boolean!]
  disable_not_in: [Boolean!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  offerMetadata: String
  offerMetadata_not: String
  offerMetadata_gt: String
  offerMetadata_lt: String
  offerMetadata_gte: String
  offerMetadata_lte: String
  offerMetadata_in: [String!]
  offerMetadata_not_in: [String!]
  offerMetadata_contains: String
  offerMetadata_contains_nocase: String
  offerMetadata_not_contains: String
  offerMetadata_not_contains_nocase: String
  offerMetadata_starts_with: String
  offerMetadata_starts_with_nocase: String
  offerMetadata_not_starts_with: String
  offerMetadata_not_starts_with_nocase: String
  offerMetadata_ends_with: String
  offerMetadata_ends_with_nocase: String
  offerMetadata_not_ends_with: String
  offerMetadata_not_ends_with_nocase: String
  nftContract: Bytes
  nftContract_not: Bytes
  nftContract_gt: Bytes
  nftContract_lt: Bytes
  nftContract_gte: Bytes
  nftContract_lte: Bytes
  nftContract_in: [Bytes!]
  nftContract_not_in: [Bytes!]
  nftContract_contains: Bytes
  nftContract_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UpdateOffer_filter]
  or: [UpdateOffer_filter]
}

enum UpdateOffer_orderBy {
  id
  offerId
  disable
  name
  offerMetadata
  nftContract
  blockNumber
  blockTimestamp
  transactionHash
}

type UpdateUser {
  id: Bytes!
  tokenId: BigInt!
  user: Bytes!
  expires: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input UpdateUser_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  user: Bytes
  user_not: Bytes
  user_gt: Bytes
  user_lt: Bytes
  user_gte: Bytes
  user_lte: Bytes
  user_in: [Bytes!]
  user_not_in: [Bytes!]
  user_contains: Bytes
  user_not_contains: Bytes
  expires: BigInt
  expires_not: BigInt
  expires_gt: BigInt
  expires_lt: BigInt
  expires_gte: BigInt
  expires_lte: BigInt
  expires_in: [BigInt!]
  expires_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UpdateUser_filter]
  or: [UpdateUser_filter]
}

enum UpdateUser_orderBy {
  id
  tokenId
  user
  expires
  blockNumber
  blockTimestamp
  transactionHash
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}